import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatToolbarHarness } from '@angular/material/toolbar/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatToolbarModule } from '@angular/material/toolbar';
import { ToolbarHarnessExample } from './toolbar-harness-example';
import { MatIconModule } from '@angular/material/icon';
describe('ToolbarHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatToolbarModule, MatIconModule],
            declarations: [ToolbarHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(ToolbarHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should find all toolbars', () => __awaiter(void 0, void 0, void 0, function* () {
        const toolbars = yield loader.getAllHarnesses(MatToolbarHarness);
        expect(toolbars.length).toBe(2);
    }));
    it('should find toolbar with text', () => __awaiter(void 0, void 0, void 0, function* () {
        const toolbars = yield loader.getAllHarnesses(MatToolbarHarness.with({ text: 'My App' }));
        expect(toolbars.length).toBe(1);
        expect(yield toolbars[0].hasMultipleRows()).toBeFalse();
    }));
    it('should find toolbar with regex', () => __awaiter(void 0, void 0, void 0, function* () {
        const toolbars = yield loader.getAllHarnesses(MatToolbarHarness.with({ text: /Row/ }));
        expect(toolbars.length).toBe(1);
        expect(yield toolbars[0].hasMultipleRows()).toBeTrue();
    }));
    it('should get toolbar text', () => __awaiter(void 0, void 0, void 0, function* () {
        const toolbars = yield loader.getAllHarnesses(MatToolbarHarness);
        expect(yield toolbars[0].getRowsAsText()).toEqual(['My App']);
        expect(yield toolbars[1].getRowsAsText()).toEqual([
            'Row 1',
            'Row 2 Button 1  Button 2'
        ]);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci1oYXJuZXNzLWV4YW1wbGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL3Rvb2xiYXIvdG9vbGJhci1oYXJuZXNzL3Rvb2xiYXItaGFybmVzcy1leGFtcGxlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRXBFLE9BQU8sRUFBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBQyxNQUM1RCwyQ0FBMkMsQ0FBQztBQUNuRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFckQsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxJQUFJLE9BQWdELENBQUM7SUFDckQsSUFBSSxNQUFxQixDQUFDO0lBRTFCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixPQUFPLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQyxDQUFDO0lBQzVGLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUNSLFlBQVksQ0FBQyxHQUFHLEVBQUU7UUFDaEIsT0FBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixFQUFFLGFBQWEsQ0FBQztZQUMxQyxZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztTQUN0QyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2QixPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QixNQUFNLEdBQUcseUJBQXlCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixFQUFFLENBQUMsMEJBQTBCLEVBQUUsR0FBUyxFQUFFO1FBQ3hDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRWpFLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBUyxFQUFFO1FBQzdDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhGLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzFELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsR0FBUyxFQUFFO1FBQzlDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXJGLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBUyxFQUFFO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRWpFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ2hELE9BQU87WUFDUCwwQkFBMEI7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXN0QmVkLCBDb21wb25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXRUb29sYmFySGFybmVzc30gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdG9vbGJhci90ZXN0aW5nJztcbmltcG9ydCB7SGFybmVzc0xvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nfVxuICBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQge01hdFRvb2xiYXJNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3Rvb2xiYXInO1xuaW1wb3J0IHtUb29sYmFySGFybmVzc0V4YW1wbGV9IGZyb20gJy4vdG9vbGJhci1oYXJuZXNzLWV4YW1wbGUnO1xuaW1wb3J0IHtNYXRJY29uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcblxuZGVzY3JpYmUoJ1Rvb2xiYXJIYXJuZXNzRXhhbXBsZScsICgpID0+IHtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8VG9vbGJhckhhcm5lc3NFeGFtcGxlPjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIFRlc3RCZWQuaW5pdFRlc3RFbnZpcm9ubWVudChCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nKCkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbTWF0VG9vbGJhck1vZHVsZSwgTWF0SWNvbk1vZHVsZV0sXG4gICAgICAgIGRlY2xhcmF0aW9uczogW1Rvb2xiYXJIYXJuZXNzRXhhbXBsZV1cbiAgICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKCk7XG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoVG9vbGJhckhhcm5lc3NFeGFtcGxlKTtcbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgbG9hZGVyID0gVGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudC5sb2FkZXIoZml4dHVyZSk7XG4gICAgfSlcbiAgKTtcblxuICBpdCgnc2hvdWxkIGZpbmQgYWxsIHRvb2xiYXJzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRvb2xiYXJzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRUb29sYmFySGFybmVzcyk7XG5cbiAgICBleHBlY3QodG9vbGJhcnMubGVuZ3RoKS50b0JlKDIpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGZpbmQgdG9vbGJhciB3aXRoIHRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdG9vbGJhcnMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdFRvb2xiYXJIYXJuZXNzLndpdGgoe3RleHQ6ICdNeSBBcHAnfSkpO1xuXG4gICAgZXhwZWN0KHRvb2xiYXJzLmxlbmd0aCkudG9CZSgxKTtcbiAgICBleHBlY3QoYXdhaXQgdG9vbGJhcnNbMF0uaGFzTXVsdGlwbGVSb3dzKCkpLnRvQmVGYWxzZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGZpbmQgdG9vbGJhciB3aXRoIHJlZ2V4JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRvb2xiYXJzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRUb29sYmFySGFybmVzcy53aXRoKHt0ZXh0OiAvUm93L30pKTtcblxuICAgIGV4cGVjdCh0b29sYmFycy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgZXhwZWN0KGF3YWl0IHRvb2xiYXJzWzBdLmhhc011bHRpcGxlUm93cygpKS50b0JlVHJ1ZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCB0b29sYmFyIHRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdG9vbGJhcnMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdFRvb2xiYXJIYXJuZXNzKTtcblxuICAgIGV4cGVjdChhd2FpdCB0b29sYmFyc1swXS5nZXRSb3dzQXNUZXh0KCkpLnRvRXF1YWwoWydNeSBBcHAnXSk7XG4gICAgZXhwZWN0KGF3YWl0IHRvb2xiYXJzWzFdLmdldFJvd3NBc1RleHQoKSkudG9FcXVhbChbXG4gICAgICAnUm93IDEnLFxuICAgICAgJ1JvdyAyIEJ1dHRvbiAxICBCdXR0b24gMidcbiAgICBdKTtcbiAgfSk7XG59KTtcbiJdfQ==