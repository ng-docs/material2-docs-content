import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatRadioButtonHarness, MatRadioGroupHarness } from '@angular/material/radio/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatRadioModule } from '@angular/material/radio';
import { RadioHarnessExample } from './radio-harness-example';
import { ReactiveFormsModule } from '@angular/forms';
describe('RadioHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatRadioModule, ReactiveFormsModule],
            declarations: [RadioHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(RadioHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all radio-group harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const groups = yield loader.getAllHarnesses(MatRadioGroupHarness);
        expect(groups.length).toBe(1);
    }));
    it('should get name of radio-group', () => __awaiter(void 0, void 0, void 0, function* () {
        const group = yield loader.getHarness(MatRadioGroupHarness);
        const name = yield group.getName();
        expect(name).toBe('flavors');
    }));
    it('should check radio button', () => __awaiter(void 0, void 0, void 0, function* () {
        const buttons = yield loader.getAllHarnesses(MatRadioButtonHarness);
        expect(yield buttons[0].isChecked()).toBeTrue();
        yield buttons[1].check();
        expect(yield buttons[1].isChecked()).toBeTrue();
        expect(yield buttons[0].isChecked()).toBeFalse();
    }));
    it('should get label text of buttons', () => __awaiter(void 0, void 0, void 0, function* () {
        const [firstRadio, secondRadio, thirdRadio] = yield loader.getAllHarnesses(MatRadioButtonHarness);
        expect(yield firstRadio.getLabelText()).toBe('Chocolate');
        expect(yield secondRadio.getLabelText()).toBe('Vanilla');
        expect(yield thirdRadio.getLabelText()).toBe('Strawberry');
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8taGFybmVzcy1leGFtcGxlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9tYXRlcmlhbC9yYWRpby9yYWRpby1oYXJuZXNzL3JhZGlvLWhhcm5lc3MtZXhhbXBsZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFvQixZQUFZLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUMscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUU1RixPQUFPLEVBQUMsMkJBQTJCLEVBQUUsNkJBQTZCLEVBQUMsTUFDNUQsMkNBQTJDLENBQUM7QUFDbkQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7SUFDbkMsSUFBSSxPQUE4QyxDQUFDO0lBQ25ELElBQUksTUFBcUIsQ0FBQztJQUUxQixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsT0FBTyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBQztJQUM1RixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FDUixZQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixPQUFPLEVBQUUsQ0FBQyxjQUFjLEVBQUUsbUJBQW1CLENBQUM7WUFDOUMsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUM7U0FDcEMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEIsTUFBTSxHQUFHLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBRUYsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQVMsRUFBRTtRQUNyRCxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNsRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQVMsRUFBRTtRQUM5QyxNQUFNLEtBQUssR0FBRyxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM1RCxNQUFNLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkJBQTJCLEVBQUUsR0FBUyxFQUFFO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sQ0FBQyxNQUFNLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWhELE1BQU0sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxNQUFNLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25ELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsa0NBQWtDLEVBQUUsR0FBUyxFQUFFO1FBQ2hELE1BQU0sQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUN6QyxNQUFNLE1BQU0sQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN0RCxNQUFNLENBQUMsTUFBTSxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLE1BQU0sV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxNQUFNLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Rlc3RCZWQsIENvbXBvbmVudEZpeHR1cmUsIHdhaXRGb3JBc3luY30gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7VGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcvdGVzdGJlZCc7XG5pbXBvcnQge01hdFJhZGlvQnV0dG9uSGFybmVzcywgTWF0UmFkaW9Hcm91cEhhcm5lc3N9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3JhZGlvL3Rlc3RpbmcnO1xuaW1wb3J0IHtIYXJuZXNzTG9hZGVyfSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZyc7XG5pbXBvcnQge0Jyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3Rpbmd9XG4gIGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYy90ZXN0aW5nJztcbmltcG9ydCB7TWF0UmFkaW9Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3JhZGlvJztcbmltcG9ydCB7UmFkaW9IYXJuZXNzRXhhbXBsZX0gZnJvbSAnLi9yYWRpby1oYXJuZXNzLWV4YW1wbGUnO1xuaW1wb3J0IHtSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmRlc2NyaWJlKCdSYWRpb0hhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxSYWRpb0hhcm5lc3NFeGFtcGxlPjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIFRlc3RCZWQuaW5pdFRlc3RFbnZpcm9ubWVudChCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nKCkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbTWF0UmFkaW9Nb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtSYWRpb0hhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChSYWRpb0hhcm5lc3NFeGFtcGxlKTtcbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgbG9hZGVyID0gVGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudC5sb2FkZXIoZml4dHVyZSk7XG4gICAgfSlcbiAgKTtcblxuICBpdCgnc2hvdWxkIGxvYWQgYWxsIHJhZGlvLWdyb3VwIGhhcm5lc3NlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBncm91cHMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdFJhZGlvR3JvdXBIYXJuZXNzKTtcbiAgICBleHBlY3QoZ3JvdXBzLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgbmFtZSBvZiByYWRpby1ncm91cCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBncm91cCA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdFJhZGlvR3JvdXBIYXJuZXNzKTtcbiAgICBjb25zdCBuYW1lID0gYXdhaXQgZ3JvdXAuZ2V0TmFtZSgpO1xuICAgIGV4cGVjdChuYW1lKS50b0JlKCdmbGF2b3JzJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY2hlY2sgcmFkaW8gYnV0dG9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdFJhZGlvQnV0dG9uSGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IGJ1dHRvbnNbMF0uaXNDaGVja2VkKCkpLnRvQmVUcnVlKCk7XG5cbiAgICBhd2FpdCBidXR0b25zWzFdLmNoZWNrKCk7XG4gICAgZXhwZWN0KGF3YWl0IGJ1dHRvbnNbMV0uaXNDaGVja2VkKCkpLnRvQmVUcnVlKCk7XG4gICAgZXhwZWN0KGF3YWl0IGJ1dHRvbnNbMF0uaXNDaGVja2VkKCkpLnRvQmVGYWxzZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBsYWJlbCB0ZXh0IG9mIGJ1dHRvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgW2ZpcnN0UmFkaW8sIHNlY29uZFJhZGlvLCB0aGlyZFJhZGlvXSA9XG4gICAgICBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdFJhZGlvQnV0dG9uSGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IGZpcnN0UmFkaW8uZ2V0TGFiZWxUZXh0KCkpLnRvQmUoJ0Nob2NvbGF0ZScpO1xuICAgIGV4cGVjdChhd2FpdCBzZWNvbmRSYWRpby5nZXRMYWJlbFRleHQoKSkudG9CZSgnVmFuaWxsYScpO1xuICAgIGV4cGVjdChhd2FpdCB0aGlyZFJhZGlvLmdldExhYmVsVGV4dCgpKS50b0JlKCdTdHJhd2JlcnJ5Jyk7XG4gIH0pO1xufSk7XG4iXX0=