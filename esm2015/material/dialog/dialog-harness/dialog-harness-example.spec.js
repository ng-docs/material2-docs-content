import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatDialogHarness } from '@angular/material/dialog/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatDialogModule } from '@angular/material/dialog';
import { DialogHarnessExample } from './dialog-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
describe('DialogHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatDialogModule, NoopAnimationsModule],
            declarations: [DialogHarnessExample]
        }).compileComponents();
    }));
    beforeEach(() => {
        fixture = TestBed.createComponent(DialogHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    });
    it('should load harness for dialog', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.open();
        const dialogs = yield loader.getAllHarnesses(MatDialogHarness);
        expect(dialogs.length).toBe(1);
    }));
    it('should load harness for dialog with specific id', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.open({ id: 'my-dialog' });
        fixture.componentInstance.open({ id: 'other' });
        let dialogs = yield loader.getAllHarnesses(MatDialogHarness);
        expect(dialogs.length).toBe(2);
        dialogs = yield loader.getAllHarnesses(MatDialogHarness.with({ selector: '#my-dialog' }));
        expect(dialogs.length).toBe(1);
    }));
    it('should be able to get role of dialog', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.open({ role: 'alertdialog' });
        fixture.componentInstance.open({ role: 'dialog' });
        const dialogs = yield loader.getAllHarnesses(MatDialogHarness);
        expect(yield dialogs[0].getRole()).toBe('alertdialog');
        expect(yield dialogs[1].getRole()).toBe('dialog');
    }));
    it('should be able to close dialog', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.open({ disableClose: true });
        fixture.componentInstance.open();
        let dialogs = yield loader.getAllHarnesses(MatDialogHarness);
        expect(dialogs.length).toBe(2);
        yield dialogs[0].close();
        dialogs = yield loader.getAllHarnesses(MatDialogHarness);
        expect(dialogs.length).toBe(1);
        // should be a noop since "disableClose" is set to "true".
        yield dialogs[0].close();
        dialogs = yield loader.getAllHarnesses(MatDialogHarness);
        expect(dialogs.length).toBe(1);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWhhcm5lc3MtZXhhbXBsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvZGlhbG9nL2RpYWxvZy1oYXJuZXNzL2RpYWxvZy1oYXJuZXNzLWV4YW1wbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE9BQU8sRUFBb0IsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDOUUsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFFbEUsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUUxRSxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksT0FBK0MsQ0FBQztJQUNwRCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLG9CQUFvQixDQUFDO1lBQ2hELFlBQVksRUFBRSxDQUFDLG9CQUFvQixDQUFDO1NBQ3JDLENBQUMsQ0FBQyxpQkFB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QUMsQ0FBQztRQUN6RCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUvQiwwREFBMEQ7UUFDMUQsTUFBTSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDekIsT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVzdEJlZCwgQ29tcG9uZW50Rml4dHVyZSwgd2FpdEZvckFzeW5jfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHtUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50fSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZy90ZXN0YmVkJztcbmltcG9ydCB7TWF0RGlhbG9nSGFybmVzc30gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nL3Rlc3RpbmcnO1xuaW1wb3J0IHtIYXJuZXNzTG9hZGVyfSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZyc7XG5pbXBvcnQge0Jyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3Rpbmd9XG4gIGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYy90ZXN0aW5nJztcbmltcG9ydCB7TWF0RGlhbG9nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHtEaWFsb2dIYXJuZXNzRXhhbXBsZX0gZnJvbSAnLi9kaWFsb2ctaGFybmVzcy1leGFtcGxlJztcbmltcG9ydCB7Tm9vcEFuaW1hdGlvbnNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5cbmRlc2NyaWJlKCdEaWFsb2dIYXJuZXNzRXhhbXBsZScsICgpID0+IHtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8RGlhbG9nSGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXREaWFsb2dNb2R1bGUsIE5vb3BBbmltYXRpb25zTW9kdWxlXSxcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbRGlhbG9nSGFybmVzc0V4YW1wbGVdXG4gICAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xuICAgIH0pKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoRGlhbG9nSGFybmVzc0V4YW1wbGUpO1xuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQubG9hZGVyKGZpeHR1cmUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGxvYWQgaGFybmVzcyBmb3IgZGlhbG9nJywgYXN5bmMgKCkgPT4ge1xuICAgIGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2Uub3BlbigpO1xuICAgIGNvbnN0IGRpYWxvZ3MgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdERpYWxvZ0hhcm5lc3MpO1xuICAgIGV4cGVjdChkaWFsb2dzLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBsb2FkIGhhcm5lc3MgZm9yIGRpYWxvZyB3aXRoIHNwZWNpZmljIGlkJywgYXN5bmMgKCkgPT4ge1xuICAgIGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2Uub3Blbih7aWQ6ICdteS1kaWFsb2cnfSk7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5vcGVuKHtpZDogJ290aGVyJ30pO1xuICAgIGxldCBkaWFsb2dzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXREaWFsb2dIYXJuZXNzKTtcbiAgICBleHBlY3QoZGlhbG9ncy5sZW5ndGgpLnRvQmUoMik7XG5cbiAgICBkaWFsb2dzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXREaWFsb2dIYXJuZXNzLndpdGgoe3NlbGVjdG9yOiAnI215LWRpYWxvZyd9KSk7XG4gICAgZXhwZWN0KGRpYWxvZ3MubGVuZ3RoKS50b0JlKDEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHJvbGUgb2YgZGlhbG9nJywgYXN5bmMgKCkgPT4ge1xuICAgIGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2Uub3Blbih7cm9sZTogJ2FsZXJ0ZGlhbG9nJ30pO1xuICAgIGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2Uub3Blbih7cm9sZTogJ2RpYWxvZyd9KTtcbiAgICBjb25zdCBkaWFsb2dzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXREaWFsb2dIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgZGlhbG9nc1swXS5nZXRSb2xlKCkpLnRvQmUoJ2FsZXJ0ZGlhbG9nJyk7XG4gICAgZXhwZWN0KGF3YWl0IGRpYWxvZ3NbMV0uZ2V0Um9sZSgpKS50b0JlKCdkaWFsb2cnKTtcbiAgfSk7XG5cblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gY2xvc2UgZGlhbG9nJywgYXN5bmMgKCkgPT4ge1xuICAgIGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2Uub3Blbih7ZGlzYWJsZUNsb3NlOiB0cnVlfSk7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5vcGVuKCk7XG4gICAgbGV0IGRpYWxvZ3MgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdERpYWxvZ0hhcm5lc3MpO1xuXG4gICAgZXhwZWN0KGRpYWxvZ3MubGVuZ3RoKS50b0JlKDIpO1xuICAgIGF3YWl0IGRpYWxvZ3NbMF0uY2xvc2UoKTtcblxuICAgIGRpYWxvZ3MgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdERpYWxvZ0hhcm5lc3MpO1xuICAgIGV4cGVjdChkaWFsb2dzLmxlbmd0aCkudG9CZSgxKTtcblxuICAgIC8vIHNob3VsZCBiZSBhIG5vb3Agc2luY2UgXCJkaXNhYmxlQ2xvc2VcIiBpcyBzZXQgdG8gXCJ0cnVlXCIuXG4gICAgYXdhaXQgZGlhbG9nc1swXS5jbG9zZSgpO1xuICAgIGRpYWxvZ3MgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdERpYWxvZ0hhcm5lc3MpO1xuICAgIGV4cGVjdChkaWFsb2dzLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG59KTtcbiJdfQ==