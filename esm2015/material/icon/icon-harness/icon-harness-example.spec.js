import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { parallel } from '@angular/cdk/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { IconHarnessExample } from './icon-harness-example';
import { MatIconModule, MatIconRegistry } from '@angular/material/icon';
import { MatIconHarness } from '@angular/material/icon/testing';
import { DomSanitizer } from '@angular/platform-browser';
describe('IconHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatIconModule],
            declarations: [IconHarnessExample]
        }).compileComponents();
    }));
    beforeEach(() => {
        const registry = TestBed.inject(MatIconRegistry);
        const sanitizer = TestBed.inject(DomSanitizer);
        // We use `bypassSecurityTrustHtml` exclusively for testing here.
        registry.addSvgIconLiteralInNamespace('svgIcons', 'svgIcon', sanitizer.bypassSecurityTrustHtml('<svg></svg>'));
        fixture = TestBed.createComponent(IconHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    });
    it('should load all icon harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const icons = yield loader.getAllHarnesses(MatIconHarness);
        expect(icons.length).toBe(3);
    }));
    it('should get the name of an icon', () => __awaiter(void 0, void 0, void 0, function* () {
        const icons = yield loader.getAllHarnesses(MatIconHarness);
        const names = yield parallel(() => icons.map(icon => icon.getName()));
        expect(names).toEqual(['fontIcon', 'svgIcon', 'ligature_icon']);
    }));
    it('should get the namespace of an icon', () => __awaiter(void 0, void 0, void 0, function* () {
        const icons = yield loader.getAllHarnesses(MatIconHarness);
        const namespaces = yield parallel(() => icons.map(icon => icon.getNamespace()));
        expect(namespaces).toEqual(['fontIcons', 'svgIcons', null]);
    }));
    it('should get whether an icon is inline', () => __awaiter(void 0, void 0, void 0, function* () {
        const icons = yield loader.getAllHarnesses(MatIconHarness);
        const inlineStates = yield parallel(() => icons.map(icon => icon.isInline()));
        expect(inlineStates).toEqual([false, false, true]);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1oYXJuZXNzLWV4YW1wbGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL2ljb24vaWNvbi1oYXJuZXNzL2ljb24taGFybmVzcy1leGFtcGxlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBZ0IsUUFBUSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDN0QsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBQyxhQUFhLEVBQUUsZUFBZSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDdEUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUd2RCxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLElBQUksT0FBNkMsQ0FBQztJQUNsRCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQ3hCLFlBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDO1NBQ25DLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRS9DLGlFQUFpRTtRQUNqRSxRQUFRLENBQUMsNEJBQTRCLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFDekQsU0FBUyxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFFcEQsT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN0RCxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEIsTUFBTSxHQUFHLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFTLEVBQUU7UUFDOUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsR0FBUyxFQUFFO1FBQzlDLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMzRCxNQUFNLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0RSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUUsR0FBUyxFQUFFO1FBQ25ELE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMzRCxNQUFNLFVBQVUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsR0FBUyxFQUFFO1FBQ3BELE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMzRCxNQUFNLFlBQVksR0FBRyxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5RSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVzdEJlZCwgQ29tcG9uZW50Rml4dHVyZSwgd2FpdEZvckFzeW5jfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHtUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50fSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZy90ZXN0YmVkJztcbmltcG9ydCB7SGFybmVzc0xvYWRlciwgcGFyYWxsZWx9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7QnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZ31cbiAgZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuaW1wb3J0IHtJY29uSGFybmVzc0V4YW1wbGV9IGZyb20gJy4vaWNvbi1oYXJuZXNzLWV4YW1wbGUnO1xuaW1wb3J0IHtNYXRJY29uTW9kdWxlLCBNYXRJY29uUmVnaXN0cnl9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2ljb24nO1xuaW1wb3J0IHtNYXRJY29uSGFybmVzc30gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaWNvbi90ZXN0aW5nJztcbmltcG9ydCB7RG9tU2FuaXRpemVyfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuXG5kZXNjcmliZSgnSWNvbkhhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxJY29uSGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXRJY29uTW9kdWxlXSxcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbSWNvbkhhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICB9KVxuICApO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnN0IHJlZ2lzdHJ5ID0gVGVzdEJlZC5pbmplY3QoTWF0SWNvblJlZ2lzdHJ5KTtcbiAgICBjb25zdCBzYW5pdGl6ZXIgPSBUZXN0QmVkLmluamVjdChEb21TYW5pdGl6ZXIpO1xuXG4gICAgLy8gV2UgdXNlIGBieXBhc3NTZWN1cml0eVRydXN0SHRtbGAgZXhjbHVzaXZlbHkgZm9yIHRlc3RpbmcgaGVyZS5cbiAgICByZWdpc3RyeS5hZGRTdmdJY29uTGl0ZXJhbEluTmFtZXNwYWNlKCdzdmdJY29ucycsICdzdmdJY29uJyxcbiAgICAgIHNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCgnPHN2Zz48L3N2Zz4nKSk7XG5cbiAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoSWNvbkhhcm5lc3NFeGFtcGxlKTtcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcbiAgICBsb2FkZXIgPSBUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50LmxvYWRlcihmaXh0dXJlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBsb2FkIGFsbCBpY29uIGhhcm5lc3NlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpY29ucyA9IGF3YWl0IGxvYWRlci5nZXRBbGxIYXJuZXNzZXMoTWF0SWNvbkhhcm5lc3MpO1xuICAgIGV4cGVjdChpY29ucy5sZW5ndGgpLnRvQmUoMyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IHRoZSBuYW1lIG9mIGFuIGljb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaWNvbnMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdEljb25IYXJuZXNzKTtcbiAgICBjb25zdCBuYW1lcyA9IGF3YWl0IHBhcmFsbGVsKCgpID0+IGljb25zLm1hcChpY29uID0+IGljb24uZ2V0TmFtZSgpKSk7XG4gICAgZXhwZWN0KG5hbWVzKS50b0VxdWFsKFsnZm9udEljb24nLCAnc3ZnSWNvbicsICdsaWdhdHVyZV9pY29uJ10pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGljb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaWNvbnMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdEljb25IYXJuZXNzKTtcbiAgICBjb25zdCBuYW1lc3BhY2VzID0gYXdhaXQgcGFyYWxsZWwoKCkgPT4gaWNvbnMubWFwKGljb24gPT4gaWNvbi5nZXROYW1lc3BhY2UoKSkpO1xuICAgIGV4cGVjdChuYW1lc3BhY2VzKS50b0VxdWFsKFsnZm9udEljb25zJywgJ3N2Z0ljb25zJywgbnVsbF0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCB3aGV0aGVyIGFuIGljb24gaXMgaW5saW5lJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGljb25zID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRJY29uSGFybmVzcyk7XG4gICAgY29uc3QgaW5saW5lU3RhdGVzID0gYXdhaXQgcGFyYWxsZWwoKCkgPT4gaWNvbnMubWFwKGljb24gPT4gaWNvbi5pc0lubGluZSgpKSk7XG4gICAgZXhwZWN0KGlubGluZVN0YXRlcykudG9FcXVhbChbZmFsc2UsIGZhbHNlLCB0cnVlXSk7XG4gIH0pO1xufSk7XG4iXX0=