import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatSliderHarness } from '@angular/material/slider/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatSliderModule } from '@angular/material/slider';
import { SliderHarnessExample } from './slider-harness-example';
describe('SliderHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatSliderModule],
            declarations: [SliderHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(SliderHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all slider harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const sliders = yield loader.getAllHarnesses(MatSliderHarness);
        expect(sliders.length).toBe(1);
    }));
    it('should get value of slider', () => __awaiter(void 0, void 0, void 0, function* () {
        const slider = yield loader.getHarness(MatSliderHarness);
        expect(yield slider.getValue()).toBe(50);
    }));
    it('should get percentage of slider', () => __awaiter(void 0, void 0, void 0, function* () {
        const slider = yield loader.getHarness(MatSliderHarness);
        expect(yield slider.getPercentage()).toBe(0.5);
    }));
    it('should get max value of slider', () => __awaiter(void 0, void 0, void 0, function* () {
        const slider = yield loader.getHarness(MatSliderHarness);
        expect(yield slider.getMaxValue()).toBe(100);
    }));
    it('should be able to set value of slider', () => __awaiter(void 0, void 0, void 0, function* () {
        const slider = yield loader.getHarness(MatSliderHarness);
        expect(yield slider.getValue()).toBe(50);
        yield slider.setValue(33);
        expect(yield slider.getValue()).toBe(33);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWhhcm5lc3MtZXhhbXBsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvc2xpZGVyL3NsaWRlci1oYXJuZXNzL3NsaWRlci1oYXJuZXNzLWV4YW1wbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE9BQU8sRUFBb0IsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDOUUsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFFbEUsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUU5RCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksT0FBK0MsQ0FBQztJQUNwRCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDO1lBQzFCLFlBQVksRUFBRSxDQUFDLG9CQUFvQixDQUFDO1NBQ3JDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDeEQsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFTLEVBQUU7UUFDaEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxHQUFTLEVBQUU7UUFDMUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLE1BQU0sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaUNBQWlDLEVBQUUsR0FBUyxFQUFFO1FBQy9DLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxNQUFNLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQVMsRUFBRTtRQUM5QyxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RCxNQUFNLENBQUMsTUFBTSxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUdILEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxHQUFTLEVBQUU7UUFDckQsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLE1BQU0sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXpDLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxQixNQUFNLENBQUMsTUFBTSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXN0QmVkLCBDb21wb25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXRTbGlkZXJIYXJuZXNzfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zbGlkZXIvdGVzdGluZyc7XG5pbXBvcnQge0hhcm5lc3NMb2FkZXJ9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7QnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZ31cbiAgZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuaW1wb3J0IHtNYXRTbGlkZXJNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NsaWRlcic7XG5pbXBvcnQge1NsaWRlckhhcm5lc3NFeGFtcGxlfSBmcm9tICcuL3NsaWRlci1oYXJuZXNzLWV4YW1wbGUnO1xuXG5kZXNjcmliZSgnU2xpZGVySGFybmVzc0V4YW1wbGUnLCAoKSA9PiB7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFNsaWRlckhhcm5lc3NFeGFtcGxlPjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIFRlc3RCZWQuaW5pdFRlc3RFbnZpcm9ubWVudChCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nKCkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbTWF0U2xpZGVyTW9kdWxlXSxcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbU2xpZGVySGFybmVzc0V4YW1wbGVdXG4gICAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFNsaWRlckhhcm5lc3NFeGFtcGxlKTtcbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgbG9hZGVyID0gVGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudC5sb2FkZXIoZml4dHVyZSk7XG4gICAgfSlcbiAgKTtcblxuICBpdCgnc2hvdWxkIGxvYWQgYWxsIHNsaWRlciBoYXJuZXNzZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2xpZGVycyA9IGF3YWl0IGxvYWRlci5nZXRBbGxIYXJuZXNzZXMoTWF0U2xpZGVySGFybmVzcyk7XG4gICAgZXhwZWN0KHNsaWRlcnMubGVuZ3RoKS50b0JlKDEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCB2YWx1ZSBvZiBzbGlkZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2xpZGVyID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0U2xpZGVySGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IHNsaWRlci5nZXRWYWx1ZSgpKS50b0JlKDUwKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgcGVyY2VudGFnZSBvZiBzbGlkZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2xpZGVyID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0U2xpZGVySGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IHNsaWRlci5nZXRQZXJjZW50YWdlKCkpLnRvQmUoMC41KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgbWF4IHZhbHVlIG9mIHNsaWRlcicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzbGlkZXIgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRTbGlkZXJIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgc2xpZGVyLmdldE1heFZhbHVlKCkpLnRvQmUoMTAwKTtcbiAgfSk7XG5cblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gc2V0IHZhbHVlIG9mIHNsaWRlcicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzbGlkZXIgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRTbGlkZXJIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgc2xpZGVyLmdldFZhbHVlKCkpLnRvQmUoNTApO1xuXG4gICAgYXdhaXQgc2xpZGVyLnNldFZhbHVlKDMzKTtcblxuICAgIGV4cGVjdChhd2FpdCBzbGlkZXIuZ2V0VmFsdWUoKSkudG9CZSgzMyk7XG4gIH0pO1xufSk7XG4iXX0=