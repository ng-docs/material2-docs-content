import { __awaiter } from "tslib";
import { TestBed, waitForAsync, inject } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatBottomSheetHarness } from '@angular/material/bottom-sheet/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { BottomSheetHarnessExample } from './bottom-sheet-harness-example';
import { OverlayContainer } from '@angular/cdk/overlay';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
describe('BottomSheetHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatBottomSheetModule, NoopAnimationsModule],
            declarations: [BottomSheetHarnessExample]
        }).compileComponents();
    }));
    beforeEach(() => {
        fixture = TestBed.createComponent(BottomSheetHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.documentRootLoader(fixture);
        inject([OverlayContainer], () => { })();
    });
    it('should load harness for a bottom sheet', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.open();
        const bottomSheets = yield loader.getAllHarnesses(MatBottomSheetHarness);
        expect(bottomSheets.length).toBe(1);
    }));
    it('should be able to get aria-label of the bottom sheet', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.open({ ariaLabel: 'Confirm purchase.' });
        const bottomSheet = yield loader.getHarness(MatBottomSheetHarness);
        expect(yield bottomSheet.getAriaLabel()).toBe('Confirm purchase.');
    }));
    it('should be able to dismiss the bottom sheet', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.open();
        let bottomSheets = yield loader.getAllHarnesses(MatBottomSheetHarness);
        expect(bottomSheets.length).toBe(1);
        yield bottomSheets[0].dismiss();
        bottomSheets = yield loader.getAllHarnesses(MatBottomSheetHarness);
        expect(bottomSheets.length).toBe(0);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90dG9tLXNoZWV0LWhhcm5lc3MtZXhhbXBsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvYm90dG9tLXNoZWV0L2JvdHRvbS1zaGVldC1oYXJuZXNzL2JvdHRvbS1zaGVldC1oYXJuZXNzLWV4YW1wbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE9BQU8sRUFBb0IsWUFBWSxFQUFFLE1BQU0sRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3RGLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBRTdFLE9BQU8sRUFBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBQyxNQUM1RCwyQ0FBMkMsQ0FBQztBQUNuRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN6RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUUxRSxRQUFRLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLElBQUksT0FBb0QsQ0FBQztJQUN6RCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLENBQUM7WUFDckQsWUFBWSxFQUFFLENBQUMseUJBQXlCLENBQUM7U0FDMUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVOLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzdELE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QixNQUFNLEdBQUcseUJBQXlCLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLEdBQVMsRUFBRTtRQUN0RCxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDakMsTUFBTSxZQUFZLEdBQUcsTUFBTSxNQUFNLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDekUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzREFBc0QsRUFBRSxHQUFTLEVBQUU7UUFDcEUsT0FBTyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFDLFNBQVMsRUFBRSxtQkFBbUIsRUFBQyxDQUFDLENBQUM7UUFDakUsTUFBTSxXQUFXLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDbkUsTUFBTSxDQUFDLE1BQU0sV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFTLEVBQUU7UUFDMUQsT0FBTyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pDLElBQUksWUFBWSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRXZFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWhDLFlBQVksR0FBRyxNQUFNLE1BQU0sQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNuRSxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Rlc3RCZWQsIENvbXBvbmVudEZpeHR1cmUsIHdhaXRGb3JBc3luYywgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHtUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50fSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZy90ZXN0YmVkJztcbmltcG9ydCB7TWF0Qm90dG9tU2hlZXRIYXJuZXNzfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9ib3R0b20tc2hlZXQvdGVzdGluZyc7XG5pbXBvcnQge0hhcm5lc3NMb2FkZXJ9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7QnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZ31cbiAgZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuaW1wb3J0IHtNYXRCb3R0b21TaGVldE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYm90dG9tLXNoZWV0JztcbmltcG9ydCB7Qm90dG9tU2hlZXRIYXJuZXNzRXhhbXBsZX0gZnJvbSAnLi9ib3R0b20tc2hlZXQtaGFybmVzcy1leGFtcGxlJztcbmltcG9ydCB7T3ZlcmxheUNvbnRhaW5lcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHtOb29wQW5pbWF0aW9uc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcblxuZGVzY3JpYmUoJ0JvdHRvbVNoZWV0SGFybmVzc0V4YW1wbGUnLCAoKSA9PiB7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPEJvdHRvbVNoZWV0SGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXRCb3R0b21TaGVldE1vZHVsZSwgTm9vcEFuaW1hdGlvbnNNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtCb3R0b21TaGVldEhhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICB9KSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEJvdHRvbVNoZWV0SGFybmVzc0V4YW1wbGUpO1xuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQuZG9jdW1lbnRSb290TG9hZGVyKGZpeHR1cmUpO1xuICAgIGluamVjdChbT3ZlcmxheUNvbnRhaW5lcl0sICgpID0+IHt9KSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGxvYWQgaGFybmVzcyBmb3IgYSBib3R0b20gc2hlZXQnLCBhc3luYyAoKSA9PiB7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5vcGVuKCk7XG4gICAgY29uc3QgYm90dG9tU2hlZXRzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRCb3R0b21TaGVldEhhcm5lc3MpO1xuICAgIGV4cGVjdChib3R0b21TaGVldHMubGVuZ3RoKS50b0JlKDEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IGFyaWEtbGFiZWwgb2YgdGhlIGJvdHRvbSBzaGVldCcsIGFzeW5jICgpID0+IHtcbiAgICBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlLm9wZW4oe2FyaWFMYWJlbDogJ0NvbmZpcm0gcHVyY2hhc2UuJ30pO1xuICAgIGNvbnN0IGJvdHRvbVNoZWV0ID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0Qm90dG9tU2hlZXRIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgYm90dG9tU2hlZXQuZ2V0QXJpYUxhYmVsKCkpLnRvQmUoJ0NvbmZpcm0gcHVyY2hhc2UuJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBkaXNtaXNzIHRoZSBib3R0b20gc2hlZXQnLCBhc3luYyAoKSA9PiB7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5vcGVuKCk7XG4gICAgbGV0IGJvdHRvbVNoZWV0cyA9IGF3YWl0IGxvYWRlci5nZXRBbGxIYXJuZXNzZXMoTWF0Qm90dG9tU2hlZXRIYXJuZXNzKTtcblxuICAgIGV4cGVjdChib3R0b21TaGVldHMubGVuZ3RoKS50b0JlKDEpO1xuICAgIGF3YWl0IGJvdHRvbVNoZWV0c1swXS5kaXNtaXNzKCk7XG5cbiAgICBib3R0b21TaGVldHMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdEJvdHRvbVNoZWV0SGFybmVzcyk7XG4gICAgZXhwZWN0KGJvdHRvbVNoZWV0cy5sZW5ndGgpLnRvQmUoMCk7XG4gIH0pO1xufSk7XG4iXX0=