import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatBadgeHarness } from '@angular/material/badge/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatBadgeModule } from '@angular/material/badge';
import { BadgeHarnessExample } from './badge-harness-example';
describe('BadgeHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatBadgeModule],
            declarations: [BadgeHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(BadgeHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all badge harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const badges = yield loader.getAllHarnesses(MatBadgeHarness);
        expect(badges.length).toBe(3);
    }));
    it('should be able to get the text of a badge', () => __awaiter(void 0, void 0, void 0, function* () {
        const badge = yield loader.getHarness(MatBadgeHarness.with({ selector: '#simple' }));
        expect(yield badge.getText()).toBe('S');
        fixture.componentInstance.simpleContent = 'Changed';
        expect(yield badge.getText()).toBe('Changed');
    }));
    it('should get whether a badge is overlapping', () => __awaiter(void 0, void 0, void 0, function* () {
        const badge = yield loader.getHarness(MatBadgeHarness.with({ selector: '#overlapping' }));
        expect(yield badge.isOverlapping()).toBe(true);
        fixture.componentInstance.overlap = false;
        expect(yield badge.isOverlapping()).toBe(false);
    }));
    it('should get whether a badge is disabled', () => __awaiter(void 0, void 0, void 0, function* () {
        const badge = yield loader.getHarness(MatBadgeHarness.with({ selector: '#disabled' }));
        expect(yield badge.isDisabled()).toBe(true);
        fixture.componentInstance.disabled = false;
        expect(yield badge.isDisabled()).toBe(false);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UtaGFybmVzcy1leGFtcGxlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9tYXRlcmlhbC9iYWRnZS9iYWRnZS1oYXJuZXNzL2JhZGdlLWhhcm5lc3MtZXhhbXBsZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFvQixZQUFZLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFaEUsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLElBQUksT0FBOEMsQ0FBQztJQUNuRCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO1lBQ3pCLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDO1NBQ3BDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFTLEVBQUU7UUFDL0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsR0FBUyxFQUFFO1FBQ3pELE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUVuRixNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7UUFDcEQsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsR0FBUyxFQUFFO1FBQ3pELE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLGNBQWMsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUV4RixNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDMUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0NBQXdDLEVBQUUsR0FBUyxFQUFFO1FBQ3RELE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLFdBQVcsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUVyRixNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDM0MsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVzdEJlZCwgQ29tcG9uZW50Rml4dHVyZSwgd2FpdEZvckFzeW5jfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHtUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50fSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZy90ZXN0YmVkJztcbmltcG9ydCB7TWF0QmFkZ2VIYXJuZXNzfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9iYWRnZS90ZXN0aW5nJztcbmltcG9ydCB7SGFybmVzc0xvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nfVxuICBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQge01hdEJhZGdlTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9iYWRnZSc7XG5pbXBvcnQge0JhZGdlSGFybmVzc0V4YW1wbGV9IGZyb20gJy4vYmFkZ2UtaGFybmVzcy1leGFtcGxlJztcblxuZGVzY3JpYmUoJ0JhZGdlSGFybmVzc0V4YW1wbGUnLCAoKSA9PiB7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPEJhZGdlSGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXRCYWRnZU1vZHVsZV0sXG4gICAgICAgIGRlY2xhcmF0aW9uczogW0JhZGdlSGFybmVzc0V4YW1wbGVdXG4gICAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEJhZGdlSGFybmVzc0V4YW1wbGUpO1xuICAgICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICBsb2FkZXIgPSBUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50LmxvYWRlcihmaXh0dXJlKTtcbiAgICB9KVxuICApO1xuXG4gIGl0KCdzaG91bGQgbG9hZCBhbGwgYmFkZ2UgaGFybmVzc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGJhZGdlcyA9IGF3YWl0IGxvYWRlci5nZXRBbGxIYXJuZXNzZXMoTWF0QmFkZ2VIYXJuZXNzKTtcbiAgICBleHBlY3QoYmFkZ2VzLmxlbmd0aCkudG9CZSgzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGdldCB0aGUgdGV4dCBvZiBhIGJhZGdlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGJhZGdlID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0QmFkZ2VIYXJuZXNzLndpdGgoe3NlbGVjdG9yOiAnI3NpbXBsZSd9KSk7XG5cbiAgICBleHBlY3QoYXdhaXQgYmFkZ2UuZ2V0VGV4dCgpKS50b0JlKCdTJyk7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5zaW1wbGVDb250ZW50ID0gJ0NoYW5nZWQnO1xuICAgIGV4cGVjdChhd2FpdCBiYWRnZS5nZXRUZXh0KCkpLnRvQmUoJ0NoYW5nZWQnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgd2hldGhlciBhIGJhZGdlIGlzIG92ZXJsYXBwaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGJhZGdlID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0QmFkZ2VIYXJuZXNzLndpdGgoe3NlbGVjdG9yOiAnI292ZXJsYXBwaW5nJ30pKTtcblxuICAgIGV4cGVjdChhd2FpdCBiYWRnZS5pc092ZXJsYXBwaW5nKCkpLnRvQmUodHJ1ZSk7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5vdmVybGFwID0gZmFsc2U7XG4gICAgZXhwZWN0KGF3YWl0IGJhZGdlLmlzT3ZlcmxhcHBpbmcoKSkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IHdoZXRoZXIgYSBiYWRnZSBpcyBkaXNhYmxlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBiYWRnZSA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdEJhZGdlSGFybmVzcy53aXRoKHtzZWxlY3RvcjogJyNkaXNhYmxlZCd9KSk7XG5cbiAgICBleHBlY3QoYXdhaXQgYmFkZ2UuaXNEaXNhYmxlZCgpKS50b0JlKHRydWUpO1xuICAgIGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2UuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICBleHBlY3QoYXdhaXQgYmFkZ2UuaXNEaXNhYmxlZCgpKS50b0JlKGZhbHNlKTtcbiAgfSk7XG59KTtcbiJdfQ==