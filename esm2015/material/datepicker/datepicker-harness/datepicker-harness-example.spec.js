import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatDatepickerInputHarness } from '@angular/material/datepicker/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { DatepickerHarnessExample } from './datepicker-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { MatNativeDateModule } from '@angular/material/core';
import { FormsModule } from '@angular/forms';
describe('DatepickerHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatDatepickerModule, NoopAnimationsModule, MatNativeDateModule, FormsModule],
            declarations: [DatepickerHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(DatepickerHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all datepicker input harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const inputs = yield loader.getAllHarnesses(MatDatepickerInputHarness);
        expect(inputs.length).toBe(1);
    }));
    it('should get whether the input has an associated calendar', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = yield loader.getHarness(MatDatepickerInputHarness);
        expect(yield input.hasCalendar()).toBeTrue();
    }));
    it('should set the input value', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = yield loader.getHarness(MatDatepickerInputHarness);
        expect(yield input.getValue()).toBeFalsy();
        yield input.setValue('1/1/2020');
        expect(yield input.getValue()).toBe('1/1/2020');
    }));
    it('should get the minimum date of the input', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = yield loader.getHarness(MatDatepickerInputHarness);
        fixture.componentInstance.minDate = new Date(2020, 0, 1, 12, 0, 0);
        expect(yield input.getMin()).toEqual('2020-01-01');
    }));
    it('should be able to open and close a calendar in popup mode', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = yield loader.getHarness(MatDatepickerInputHarness);
        expect(yield input.isCalendarOpen()).toBe(false);
        yield input.openCalendar();
        expect(yield input.isCalendarOpen()).toBe(true);
        yield input.closeCalendar();
        expect(yield input.isCalendarOpen()).toBe(false);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1oYXJuZXNzLWV4YW1wbGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci1oYXJuZXNzL2RhdGVwaWNrZXItaGFybmVzcy1leGFtcGxlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBRS9FLE9BQU8sRUFBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBQyxNQUM1RCwyQ0FBMkMsQ0FBQztBQUNuRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN0RSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUMxRSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUMzRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtJQUN4QyxJQUFJLE9BQW1ELENBQUM7SUFDeEQsSUFBSSxNQUFxQixDQUFDO0lBRTFCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixPQUFPLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQyxDQUFDO0lBQzVGLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUNSLFlBQVksQ0FBQyxHQUFHLEVBQUU7UUFDaEIsT0FBTyxDQUFDLHNC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c3RCZWQsIENvbXBvbmVudEZpeHR1cmUsIHdhaXRGb3JBc3luY30gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7VGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcvdGVzdGJlZCc7XG5pbXBvcnQge01hdERhdGVwaWNrZXJJbnB1dEhhcm5lc3N9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RhdGVwaWNrZXIvdGVzdGluZyc7XG5pbXBvcnQge0hhcm5lc3NMb2FkZXJ9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7QnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZ31cbiAgZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuaW1wb3J0IHtNYXREYXRlcGlja2VyTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kYXRlcGlja2VyJztcbmltcG9ydCB7RGF0ZXBpY2tlckhhcm5lc3NFeGFtcGxlfSBmcm9tICcuL2RhdGVwaWNrZXItaGFybmVzcy1leGFtcGxlJztcbmltcG9ydCB7Tm9vcEFuaW1hdGlvbnNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge01hdE5hdGl2ZURhdGVNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuaW1wb3J0IHtGb3Jtc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5kZXNjcmliZSgnRGF0ZXBpY2tlckhhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxEYXRlcGlja2VySGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXREYXRlcGlja2VyTW9kdWxlLCBOb29wQW5pbWF0aW9uc01vZHVsZSwgTWF0TmF0aXZlRGF0ZU1vZHVsZSwgRm9ybXNNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtEYXRlcGlja2VySGFybmVzc0V4YW1wbGVdXG4gICAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KERhdGVwaWNrZXJIYXJuZXNzRXhhbXBsZSk7XG4gICAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQubG9hZGVyKGZpeHR1cmUpO1xuICAgIH0pXG4gICk7XG5cbiAgaXQoJ3Nob3VsZCBsb2FkIGFsbCBkYXRlcGlja2VyIGlucHV0IGhhcm5lc3NlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpbnB1dHMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdERhdGVwaWNrZXJJbnB1dEhhcm5lc3MpO1xuICAgIGV4cGVjdChpbnB1dHMubGVuZ3RoKS50b0JlKDEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCB3aGV0aGVyIHRoZSBpbnB1dCBoYXMgYW4gYXNzb2NpYXRlZCBjYWxlbmRhcicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdERhdGVwaWNrZXJJbnB1dEhhcm5lc3MpO1xuICAgIGV4cGVjdChhd2FpdCBpbnB1dC5oYXNDYWxlbmRhcigpKS50b0JlVHJ1ZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHNldCB0aGUgaW5wdXQgdmFsdWUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXREYXRlcGlja2VySW5wdXRIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgaW5wdXQuZ2V0VmFsdWUoKSkudG9CZUZhbHN5KCk7XG5cbiAgICBhd2FpdCBpbnB1dC5zZXRWYWx1ZSgnMS8xLzIwMjAnKTtcbiAgICBleHBlY3QoYXdhaXQgaW5wdXQuZ2V0VmFsdWUoKSkudG9CZSgnMS8xLzIwMjAnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgdGhlIG1pbmltdW0gZGF0ZSBvZiB0aGUgaW5wdXQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXREYXRlcGlja2VySW5wdXRIYXJuZXNzKTtcbiAgICBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlLm1pbkRhdGUgPSBuZXcgRGF0ZSgyMDIwLCAwLCAxLCAxMiwgMCwgMCk7XG4gICAgZXhwZWN0KGF3YWl0IGlucHV0LmdldE1pbigpKS50b0VxdWFsKCcyMDIwLTAxLTAxJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBvcGVuIGFuZCBjbG9zZSBhIGNhbGVuZGFyIGluIHBvcHVwIG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXREYXRlcGlja2VySW5wdXRIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgaW5wdXQuaXNDYWxlbmRhck9wZW4oKSkudG9CZShmYWxzZSk7XG5cbiAgICBhd2FpdCBpbnB1dC5vcGVuQ2FsZW5kYXIoKTtcbiAgICBleHBlY3QoYXdhaXQgaW5wdXQuaXNDYWxlbmRhck9wZW4oKSkudG9CZSh0cnVlKTtcblxuICAgIGF3YWl0IGlucHV0LmNsb3NlQ2FsZW5kYXIoKTtcbiAgICBleHBlY3QoYXdhaXQgaW5wdXQuaXNDYWxlbmRhck9wZW4oKSkudG9CZShmYWxzZSk7XG4gIH0pO1xufSk7XG4iXX0=