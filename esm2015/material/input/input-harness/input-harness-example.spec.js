import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatInputHarness } from '@angular/material/input/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatInputModule } from '@angular/material/input';
import { InputHarnessExample } from './input-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { ReactiveFormsModule } from '@angular/forms';
describe('InputHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatInputModule, NoopAnimationsModule, ReactiveFormsModule],
            declarations: [InputHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(InputHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all input harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const inputs = yield loader.getAllHarnesses(MatInputHarness);
        expect(inputs.length).toBe(3);
    }));
    it('should load input with a specific value', () => __awaiter(void 0, void 0, void 0, function* () {
        const inputs = yield loader.getAllHarnesses(MatInputHarness.with({ value: 'Sushi' }));
        expect(inputs.length).toBe(1);
    }));
    it('should be able to set value of input', () => __awaiter(void 0, void 0, void 0, function* () {
        const inputs = yield loader.getAllHarnesses(MatInputHarness);
        const input = inputs[0];
        expect(yield input.getValue()).toBe('Sushi');
        yield input.setValue('');
        expect(yield input.getValue()).toBe('');
    }));
    it('should be able to get disabled state', () => __awaiter(void 0, void 0, void 0, function* () {
        const inputs = yield loader.getAllHarnesses(MatInputHarness);
        expect(inputs.length).toBe(3);
        expect(yield inputs[0].isDisabled()).toBe(false);
        expect(yield inputs[1].isDisabled()).toBe(false);
        expect(yield inputs[2].isDisabled()).toBe(false);
        fixture.componentInstance.disabled = true;
        expect(yield inputs[1].isDisabled()).toBe(true);
    }));
    it('should be able to get type of input', () => __awaiter(void 0, void 0, void 0, function* () {
        const inputs = yield loader.getAllHarnesses(MatInputHarness);
        expect(inputs.length).toBe(3);
        expect(yield inputs[0].getType()).toBe('text');
        expect(yield inputs[1].getType()).toBe('number');
        expect(yield inputs[2].getType()).toBe('textarea');
        fixture.componentInstance.inputType = 'text';
        expect(yield inputs[1].getType()).toBe('text');
    }));
});
//# sourceMappingURL=data:application/json;base64,