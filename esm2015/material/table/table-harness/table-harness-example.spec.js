import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatTableHarness } from '@angular/material/table/testing';
import { parallel } from '@angular/cdk/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatTableModule } from '@angular/material/table';
import { TableHarnessExample } from './table-harness-example';
describe('TableHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatTableModule],
            declarations: [TableHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(TableHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load harness for a table', () => __awaiter(void 0, void 0, void 0, function* () {
        const tables = yield loader.getAllHarnesses(MatTableHarness);
        expect(tables.length).toBe(1);
    }));
    it('should get the different kinds of rows in the table', () => __awaiter(void 0, void 0, void 0, function* () {
        const table = yield loader.getHarness(MatTableHarness);
        const headerRows = yield table.getHeaderRows();
        const footerRows = yield table.getFooterRows();
        const rows = yield table.getRows();
        expect(headerRows.length).toBe(1);
        expect(footerRows.length).toBe(1);
        expect(rows.length).toBe(10);
    }));
    it('should get cells inside a row', () => __awaiter(void 0, void 0, void 0, function* () {
        const table = yield loader.getHarness(MatTableHarness);
        const headerRows = yield table.getHeaderRows();
        const footerRows = yield table.getFooterRows();
        const rows = yield table.getRows();
        const headerCells = (yield parallel(() => headerRows.map(row => row.getCells())))
            .map(row => row.length);
        const footerCells = (yield parallel(() => footerRows.map(row => row.getCells())))
            .map(row => row.length);
        const cells = (yield parallel(() => rows.map(row => row.getCells())))
            .map(row => row.length);
        expect(headerCells).toEqual([4]);
        expect(cells).toEqual([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]);
        expect(footerCells).toEqual([4]);
    }));
    it('should be able to get the text of a cell', () => __awaiter(void 0, void 0, void 0, function* () {
        const table = yield loader.getHarness(MatTableHarness);
        const secondRow = (yield table.getRows())[1];
        const cells = yield secondRow.getCells();
        const cellTexts = yield parallel(() => cells.map(cell => cell.getText()));
        expect(cellTexts).toEqual(['2', 'Helium', '4.0026', 'He']);
    }));
    it('should be able to get the column name of a cell', () => __awaiter(void 0, void 0, void 0, function* () {
        const table = yield loader.getHarness(MatTableHarness);
        const fifthRow = (yield table.getRows())[1];
        const cells = yield fifthRow.getCells();
        const cellColumnNames = yield parallel(() => cells.map(cell => cell.getColumnName()));
        expect(cellColumnNames).toEqual(['position', 'name', 'weight', 'symbol']);
    }));
    it('should be able to filter cells by text', () => __awaiter(void 0, void 0, void 0, function* () {
        const table = yield loader.getHarness(MatTableHarness);
        const firstRow = (yield table.getRows())[0];
        const cells = yield firstRow.getCells({ text: '1.0079' });
        const cellTexts = yield parallel(() => cells.map(cell => cell.getText()));
        expect(cellTexts).toEqual(['1.0079']);
    }));
    it('should be able to filter cells by column name', () => __awaiter(void 0, void 0, void 0, function* () {
        const table = yield loader.getHarness(MatTableHarness);
        const firstRow = (yield table.getRows())[0];
        const cells = yield firstRow.getCells({ columnName: 'symbol' });
        const cellTexts = yield parallel(() => cells.map(cell => cell.getText()));
        expect(cellTexts).toEqual(['H']);
    }));
});
//# sourceMappingURL=data:application/json;base64,