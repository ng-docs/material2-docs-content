import { __awaiter } from "tslib";
import { parallel } from '@angular/cdk/testing';
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatListHarness } from '@angular/material/list/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatListModule } from '@angular/material/list';
import { ListHarnessExample } from './list-harness-example';
describe('ListHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatListModule],
            declarations: [ListHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(ListHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should get all items', () => __awaiter(void 0, void 0, void 0, function* () {
        const list = yield loader.getHarness(MatListHarness);
        const items = yield list.getItems();
        expect(yield parallel(() => items.map(i => i.getText())))
            .toEqual(['Item 1', 'Item 2', 'Item 3']);
    }));
    it('should get all items matching text', () => __awaiter(void 0, void 0, void 0, function* () {
        const list = yield loader.getHarness(MatListHarness);
        const items = yield list.getItems({ text: /[13]/ });
        expect(yield parallel(() => items.map(i => i.getText()))).toEqual(['Item 1', 'Item 3']);
    }));
    it('should get items by subheader', () => __awaiter(void 0, void 0, void 0, function* () {
        const list = yield loader.getHarness(MatListHarness);
        const sections = yield list.getItemsGroupedBySubheader();
        expect(sections.length).toBe(3);
        expect(sections[0].heading).toBeUndefined();
        expect(yield parallel(() => sections[0].items.map(i => i.getText()))).toEqual(['Item 1']);
        expect(sections[1].heading).toBe('Section 1');
        expect(yield parallel(() => sections[1].items.map(i => i.getText())))
            .toEqual(['Item 2', 'Item 3']);
        expect(sections[2].heading).toBe('Section 2');
        expect(sections[2].items.length).toEqual(0);
    }));
    it('should get list item text and lines', () => __awaiter(void 0, void 0, void 0, function* () {
        const list = yield loader.getHarness(MatListHarness);
        const items = yield list.getItems();
        expect(items.length).toBe(3);
        expect(yield items[0].getText()).toBe('Item 1');
        expect(yield items[0].getLinesText()).toEqual(['Item', '1']);
        expect(yield items[1].getText()).toBe('Item 2');
        expect(yield items[1].getLinesText()).toEqual([]);
        expect(yield items[2].getText()).toBe('Item 3');
        expect(yield items[2].getLinesText()).toEqual([]);
    }));
});
//# sourceMappingURL=data:application/json;base64,