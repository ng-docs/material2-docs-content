import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatCheckboxHarness } from '@angular/material/checkbox/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { CheckboxHarnessExample } from './checkbox-harness-example';
describe('CheckboxHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatCheckboxModule, ReactiveFormsModule],
            declarations: [CheckboxHarnessExample]
        }).compileComponents();
    }));
    beforeEach(() => {
        fixture = TestBed.createComponent(CheckboxHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    });
    it('should load checkbox with name', () => __awaiter(void 0, void 0, void 0, function* () {
        const checkboxes = yield loader.getAllHarnesses(MatCheckboxHarness.with({ name: 'first-name' }));
        expect(checkboxes.length).toBe(1);
        expect(yield checkboxes[0].getLabelText()).toBe('First');
    }));
    it('should get checked state', () => __awaiter(void 0, void 0, void 0, function* () {
        const [checkedCheckbox, uncheckedCheckbox] = yield loader.getAllHarnesses(MatCheckboxHarness);
        expect(yield checkedCheckbox.isChecked()).toBe(true);
        expect(yield uncheckedCheckbox.isChecked()).toBe(false);
    }));
    it('should get name', () => __awaiter(void 0, void 0, void 0, function* () {
        const checkbox = yield loader.getHarness(MatCheckboxHarness.with({ label: 'First' }));
        expect(yield checkbox.getName()).toBe('first-name');
    }));
    it('should get label text', () => __awaiter(void 0, void 0, void 0, function* () {
        const [firstCheckbox, secondCheckbox] = yield loader.getAllHarnesses(MatCheckboxHarness);
        expect(yield firstCheckbox.getLabelText()).toBe('First');
        expect(yield secondCheckbox.getLabelText()).toBe('Second');
    }));
    it('should toggle checkbox', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.disabled = false;
        const [checkedCheckbox, uncheckedCheckbox] = yield loader.getAllHarnesses(MatCheckboxHarness);
        yield checkedCheckbox.toggle();
        yield uncheckedCheckbox.toggle();
        expect(yield checkedCheckbox.isChecked()).toBe(false);
        expect(yield uncheckedCheckbox.isChecked()).toBe(true);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtaGFybmVzcy1leGFtcGxlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9tYXRlcmlhbC9jaGVja2JveC9jaGVja2JveC1oYXJuZXNzL2NoZWNrYm94LWhhcm5lc3MtZXhhbXBsZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFvQixZQUFZLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUV0RSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsMkJBQTJCLEVBQUUsNkJBQTZCLEVBQUMsTUFDNUQsMkNBQTJDLENBQUM7QUFDbkQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFFbEUsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxJQUFJLE9BQWlELENBQUM7SUFDdEQsSUFBSSxNQUFxQixDQUFDO0lBRTFCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixPQUFPLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQyxDQUFDO0lBQzVGLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUNSLFlBQVksQ0FBQyxHQUFHLEVBQUU7UUFDaEIsT0FBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLG1CQUFtQixDQUFDO1lBQ2pELFlBQVksRUFBRSxDQUFDLHNCQUFzQixDQUFDO1NBQ3ZDLENB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LENBQUM7SUFDekQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXN0QmVkLCBDb21wb25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXRDaGVja2JveEhhcm5lc3N9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NoZWNrYm94L3Rlc3RpbmcnO1xuaW1wb3J0IHtIYXJuZXNzTG9hZGVyfSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZyc7XG5pbXBvcnQge1JlYWN0aXZlRm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7QnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZ31cbiAgZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuaW1wb3J0IHtNYXRDaGVja2JveE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY2hlY2tib3gnO1xuaW1wb3J0IHtDaGVja2JveEhhcm5lc3NFeGFtcGxlfSBmcm9tICcuL2NoZWNrYm94LWhhcm5lc3MtZXhhbXBsZSc7XG5cbmRlc2NyaWJlKCdDaGVja2JveEhhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxDaGVja2JveEhhcm5lc3NFeGFtcGxlPjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIFRlc3RCZWQuaW5pdFRlc3RFbnZpcm9ubWVudChCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nKCkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbTWF0Q2hlY2tib3hNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtDaGVja2JveEhhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICB9KSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KENoZWNrYm94SGFybmVzc0V4YW1wbGUpO1xuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQubG9hZGVyKGZpeHR1cmUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGxvYWQgY2hlY2tib3ggd2l0aCBuYW1lJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdENoZWNrYm94SGFybmVzcy53aXRoKHtuYW1lOiAnZmlyc3QtbmFtZSd9KSk7XG4gICAgZXhwZWN0KGNoZWNrYm94ZXMubGVuZ3RoKS50b0JlKDEpO1xuICAgIGV4cGVjdChhd2FpdCBjaGVja2JveGVzWzBdLmdldExhYmVsVGV4dCgpKS50b0JlKCdGaXJzdCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBjaGVja2VkIHN0YXRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IFtjaGVja2VkQ2hlY2tib3gsIHVuY2hlY2tlZENoZWNrYm94XSA9IGF3YWl0IGxvYWRlci5nZXRBbGxIYXJuZXNzZXMoTWF0Q2hlY2tib3hIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgY2hlY2tlZENoZWNrYm94LmlzQ2hlY2tlZCgpKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChhd2FpdCB1bmNoZWNrZWRDaGVja2JveC5pc0NoZWNrZWQoKSkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IG5hbWUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2hlY2tib3ggPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRDaGVja2JveEhhcm5lc3Mud2l0aCh7bGFiZWw6ICdGaXJzdCd9KSk7XG4gICAgZXhwZWN0KGF3YWl0IGNoZWNrYm94LmdldE5hbWUoKSkudG9CZSgnZmlyc3QtbmFtZScpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBsYWJlbCB0ZXh0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IFtmaXJzdENoZWNrYm94LCBzZWNvbmRDaGVja2JveF0gPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdENoZWNrYm94SGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IGZpcnN0Q2hlY2tib3guZ2V0TGFiZWxUZXh0KCkpLnRvQmUoJ0ZpcnN0Jyk7XG4gICAgZXhwZWN0KGF3YWl0IHNlY29uZENoZWNrYm94LmdldExhYmVsVGV4dCgpKS50b0JlKCdTZWNvbmQnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0b2dnbGUgY2hlY2tib3gnLCBhc3luYyAoKSA9PiB7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIGNvbnN0IFtjaGVja2VkQ2hlY2tib3gsIHVuY2hlY2tlZENoZWNrYm94XSA9IGF3YWl0IGxvYWRlci5nZXRBbGxIYXJuZXNzZXMoTWF0Q2hlY2tib3hIYXJuZXNzKTtcbiAgICBhd2FpdCBjaGVja2VkQ2hlY2tib3gudG9nZ2xlKCk7XG4gICAgYXdhaXQgdW5jaGVja2VkQ2hlY2tib3gudG9nZ2xlKCk7XG4gICAgZXhwZWN0KGF3YWl0IGNoZWNrZWRDaGVja2JveC5pc0NoZWNrZWQoKSkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KGF3YWl0IHVuY2hlY2tlZENoZWNrYm94LmlzQ2hlY2tlZCgpKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuIl19