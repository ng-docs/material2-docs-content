import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatTabGroupHarness } from '@angular/material/tabs/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatTabsModule } from '@angular/material/tabs';
import { TabGroupHarnessExample } from './tab-group-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
describe('TabGroupHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatTabsModule, NoopAnimationsModule],
            declarations: [TabGroupHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(TabGroupHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load harness for tab-group', () => __awaiter(void 0, void 0, void 0, function* () {
        const tabGroups = yield loader.getAllHarnesses(MatTabGroupHarness);
        expect(tabGroups.length).toBe(1);
    }));
    it('should load harness for tab-group with selected tab label', () => __awaiter(void 0, void 0, void 0, function* () {
        const tabGroups = yield loader.getAllHarnesses(MatTabGroupHarness.with({
            selectedTabLabel: 'Profile',
        }));
        expect(tabGroups.length).toBe(1);
    }));
    it('should be able to get tabs of tab-group', () => __awaiter(void 0, void 0, void 0, function* () {
        const tabGroup = yield loader.getHarness(MatTabGroupHarness);
        const tabs = yield tabGroup.getTabs();
        expect(tabs.length).toBe(3);
    }));
    it('should be able to select tab from tab-group', () => __awaiter(void 0, void 0, void 0, function* () {
        const tabGroup = yield loader.getHarness(MatTabGroupHarness);
        expect(yield (yield tabGroup.getSelectedTab()).getLabel()).toBe('Profile');
        yield tabGroup.selectTab({ label: 'FAQ' });
        expect(yield (yield tabGroup.getSelectedTab()).getLabel()).toBe('FAQ');
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWdyb3VwLWhhcm5lc3MtZXhhbXBsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvdGFicy90YWItZ3JvdXAtaGFybmVzcy90YWItZ3JvdXAtaGFybmVzcy1leGFtcGxlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBRWxFLE9BQU8sRUFBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBQyxNQUM1RCwyQ0FBMkMsQ0FBQztBQUNuRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDbkUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFFMUUsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxJQUFJLE9BQWlELENBQUM7SUFDdEQsSUFBSSxNQUFxQixDQUFDO0lBRTFCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixPQUFPLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQyxDQUFDO0lBQzVGLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUNSLFlBQVksQ0FBQyxHQUFHLEVBQUU7UUFDaEIsT0FBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxvQkFBb0IsQ0FBQztZQUM5QyxZQUFZLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztTQUN2QyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2QixPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QixNQUFNLEdBQUcseUJBQXlCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixFQUFFLENBQUMsbUNBQW1DLEVBQUUsR0FBUyxFQUFFO1FBQ2pELE1BQU0sU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25FLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkRBQTJELEVBQUUsR0FBUyxFQUFFO1FBQ3pFLE1BQU0sU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7WUFDckUsZ0JBQWdCLEVBQUUsU0FBUztTQUM1QixDQUFDLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUUsR0FBUyxFQUFFO1FBQ3ZELE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdELE1BQU0sSUFBSSxHQUFHLE1BQU0sUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsR0FBUyxFQUFFO1FBQzNELE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzRSxNQUFNLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekUsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXN0QmVkLCBDb21wb25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXRUYWJHcm91cEhhcm5lc3N9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3RhYnMvdGVzdGluZyc7XG5pbXBvcnQge0hhcm5lc3NMb2FkZXJ9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nJztcbmltcG9ydCB7QnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZ31cbiAgZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuaW1wb3J0IHtNYXRUYWJzTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90YWJzJztcbmltcG9ydCB7VGFiR3JvdXBIYXJuZXNzRXhhbXBsZX0gZnJvbSAnLi90YWItZ3JvdXAtaGFybmVzcy1leGFtcGxlJztcbmltcG9ydCB7Tm9vcEFuaW1hdGlvbnNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5cbmRlc2NyaWJlKCdUYWJHcm91cEhhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxUYWJHcm91cEhhcm5lc3NFeGFtcGxlPjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIFRlc3RCZWQuaW5pdFRlc3RFbnZpcm9ubWVudChCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nKCkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbTWF0VGFic01vZHVsZSwgTm9vcEFuaW1hdGlvbnNNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtUYWJHcm91cEhhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChUYWJHcm91cEhhcm5lc3NFeGFtcGxlKTtcbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgbG9hZGVyID0gVGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudC5sb2FkZXIoZml4dHVyZSk7XG4gICAgfSlcbiAgKTtcblxuICBpdCgnc2hvdWxkIGxvYWQgaGFybmVzcyBmb3IgdGFiLWdyb3VwJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRhYkdyb3VwcyA9IGF3YWl0IGxvYWRlci5nZXRBbGxIYXJuZXNzZXMoTWF0VGFiR3JvdXBIYXJuZXNzKTtcbiAgICBleHBlY3QodGFiR3JvdXBzLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBsb2FkIGhhcm5lc3MgZm9yIHRhYi1ncm91cCB3aXRoIHNlbGVjdGVkIHRhYiBsYWJlbCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0YWJHcm91cHMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdFRhYkdyb3VwSGFybmVzcy53aXRoKHtcbiAgICAgIHNlbGVjdGVkVGFiTGFiZWw6ICdQcm9maWxlJyxcbiAgICB9KSk7XG4gICAgZXhwZWN0KHRhYkdyb3Vwcy5sZW5ndGgpLnRvQmUoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBnZXQgdGFicyBvZiB0YWItZ3JvdXAnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdGFiR3JvdXAgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRUYWJHcm91cEhhcm5lc3MpO1xuICAgIGNvbnN0IHRhYnMgPSBhd2FpdCB0YWJHcm91cC5nZXRUYWJzKCk7XG4gICAgZXhwZWN0KHRhYnMubGVuZ3RoKS50b0JlKDMpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gc2VsZWN0IHRhYiBmcm9tIHRhYi1ncm91cCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0YWJHcm91cCA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdFRhYkdyb3VwSGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IChhd2FpdCB0YWJHcm91cC5nZXRTZWxlY3RlZFRhYigpKS5nZXRMYWJlbCgpKS50b0JlKCdQcm9maWxlJyk7XG4gICAgYXdhaXQgdGFiR3JvdXAuc2VsZWN0VGFiKHtsYWJlbDogJ0ZBUSd9KTtcbiAgICBleHBlY3QoYXdhaXQgKGF3YWl0IHRhYkdyb3VwLmdldFNlbGVjdGVkVGFiKCkpLmdldExhYmVsKCkpLnRvQmUoJ0ZBUScpO1xuICB9KTtcbn0pO1xuIl19