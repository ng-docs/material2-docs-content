import { __awaiter } from "tslib";
import { TestBed, waitForAsync, inject } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatAutocompleteHarness } from '@angular/material/autocomplete/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { AutocompleteHarnessExample } from './autocomplete-harness-example';
import { OverlayContainer } from '@angular/cdk/overlay';
describe('AutocompleteHarnessExample', () => {
    let fixture;
    let loader;
    let overlayContainer;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatAutocompleteModule],
            declarations: [AutocompleteHarnessExample]
        }).compileComponents();
    }));
    beforeEach(() => {
        fixture = TestBed.createComponent(AutocompleteHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
        inject([OverlayContainer], (oc) => {
            overlayContainer = oc;
        })();
    });
    afterEach(() => {
        // Angular won't call this for us so we need to do it ourselves to avoid leaks.
        overlayContainer.ngOnDestroy();
        overlayContainer = null;
    });
    it('should load all autocomplete harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const autocompletes = yield loader.getAllHarnesses(MatAutocompleteHarness);
        expect(autocompletes.length).toBe(2);
    }));
    it('should get disabled state', () => __awaiter(void 0, void 0, void 0, function* () {
        const enabled = yield loader.getHarness(MatAutocompleteHarness.with({ selector: '#plain' }));
        const disabled = yield loader.getHarness(MatAutocompleteHarness.with({ selector: '#disabled' }));
        expect(yield enabled.isDisabled()).toBe(false);
        expect(yield disabled.isDisabled()).toBe(true);
    }));
    it('should focus and blur an input', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = yield loader.getHarness(MatAutocompleteHarness.with({ selector: '#plain' }));
        expect(yield input.isFocused()).toBe(false);
        yield input.focus();
        expect(yield input.isFocused()).toBe(true);
        yield input.blur();
        expect(yield input.isFocused()).toBe(false);
    }));
    it('should be able to type in an input', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = yield loader.getHarness(MatAutocompleteHarness.with({ selector: '#plain' }));
        yield input.enterText('Hello there');
        expect(yield input.getValue()).toBe('Hello there');
    }));
    it('should be able to get filtered options', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = yield loader.getHarness(MatAutocompleteHarness.with({ selector: '#plain' }));
        yield input.focus();
        const options = yield input.getOptions({ text: /New/ });
        expect(options.length).toBe(1);
        expect(yield options[0].getText()).toBe('New York');
    }));
});
//# sourceMappingURL=data:application/json;base64,