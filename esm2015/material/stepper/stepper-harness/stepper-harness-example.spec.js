import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatStepperHarness, MatStepperNextHarness } from '@angular/material/stepper/testing';
import { parallel } from '@angular/cdk/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatStepperModule } from '@angular/material/stepper';
import { StepperHarnessExample } from './stepper-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { ReactiveFormsModule } from '@angular/forms';
describe('StepperHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatStepperModule, NoopAnimationsModule, ReactiveFormsModule],
            declarations: [StepperHarnessExample],
        }).compileComponents();
        fixture = TestBed.createComponent(StepperHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all stepper harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const steppers = yield loader.getAllHarnesses(MatStepperHarness);
        expect(steppers.length).toBe(1);
    }));
    it('should get the steps of a stepper', () => __awaiter(void 0, void 0, void 0, function* () {
        const stepper = yield loader.getHarness(MatStepperHarness);
        const steps = yield stepper.getSteps();
        expect(steps.length).toEqual(3);
    }));
    it('should be able to get the template-based label of a step', () => __awaiter(void 0, void 0, void 0, function* () {
        const stepper = yield loader.getHarness(MatStepperHarness);
        const steps = yield stepper.getSteps();
        expect(yield parallel(() => {
            return steps.map(step => step.getLabel());
        })).toEqual(['One', 'Two', 'Three']);
    }));
    it('should go forward when pressing the next button', () => __awaiter(void 0, void 0, void 0, function* () {
        const stepper = yield loader.getHarness(MatStepperHarness);
        const steps = yield stepper.getSteps();
        const secondStep = steps[1];
        const nextButton = yield secondStep.getHarness(MatStepperNextHarness);
        yield secondStep.select();
        expect(yield parallel(() => steps.map(step => step.isSelected()))).toEqual([
            false,
            true,
            false
        ]);
        yield nextButton.click();
        expect(yield parallel(() => steps.map(step => step.isSelected()))).toEqual([
            false,
            false,
            true
        ]);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1oYXJuZXNzLWV4YW1wbGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL3N0ZXBwZXIvc3RlcHBlci1oYXJuZXNzL3N0ZXBwZXItaGFybmVzcy1leGFtcGxlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxxQkFBcUIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzNGLE9BQU8sRUFBZ0IsUUFBUSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDN0QsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsSUFBSSxPQUFnRCxDQUFDO0lBQ3JELElBQUksTUFBcUIsQ0FBQztJQUUxQixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsT0FBTyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBQztJQUM1RixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FDUixZQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxz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QyxDQUFDO0lBQ0wsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXN0QmVkLCBDb21wb25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXRTdGVwcGVySGFybmVzcywgTWF0U3RlcHBlck5leHRIYXJuZXNzfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zdGVwcGVyL3Rlc3RpbmcnO1xuaW1wb3J0IHtIYXJuZXNzTG9hZGVyLCBwYXJhbGxlbH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nfVxuICBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQge01hdFN0ZXBwZXJNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3N0ZXBwZXInO1xuaW1wb3J0IHtTdGVwcGVySGFybmVzc0V4YW1wbGV9IGZyb20gJy4vc3RlcHBlci1oYXJuZXNzLWV4YW1wbGUnO1xuaW1wb3J0IHtOb29wQW5pbWF0aW9uc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcbmltcG9ydCB7UmVhY3RpdmVGb3Jtc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5kZXNjcmliZSgnU3RlcHBlckhhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxTdGVwcGVySGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXRTdGVwcGVyTW9kdWxlLCBOb29wQW5pbWF0aW9uc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZV0sXG4gICAgICAgIGRlY2xhcmF0aW9uczogW1N0ZXBwZXJIYXJuZXNzRXhhbXBsZV0sXG4gICAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFN0ZXBwZXJIYXJuZXNzRXhhbXBsZSk7XG4gICAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQubG9hZGVyKGZpeHR1cmUpO1xuICAgIH0pXG4gICk7XG5cbiAgaXQoJ3Nob3VsZCBsb2FkIGFsbCBzdGVwcGVyIGhhcm5lc3NlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzdGVwcGVycyA9IGF3YWl0IGxvYWRlci5nZXRBbGxIYXJuZXNzZXMoTWF0U3RlcHBlckhhcm5lc3MpO1xuICAgIGV4cGVjdChzdGVwcGVycy5sZW5ndGgpLnRvQmUoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IHRoZSBzdGVwcyBvZiBhIHN0ZXBwZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc3RlcHBlciA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdFN0ZXBwZXJIYXJuZXNzKTtcbiAgICBjb25zdCBzdGVwcyA9IGF3YWl0IHN0ZXBwZXIuZ2V0U3RlcHMoKTtcbiAgICBleHBlY3Qoc3RlcHMubGVuZ3RoKS50b0VxdWFsKDMpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHRoZSB0ZW1wbGF0ZS1iYXNlZCBsYWJlbCBvZiBhIHN0ZXAnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc3RlcHBlciA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdFN0ZXBwZXJIYXJuZXNzKTtcbiAgICBjb25zdCBzdGVwcyA9IGF3YWl0IHN0ZXBwZXIuZ2V0U3RlcHMoKTtcbiAgICBleHBlY3QoYXdhaXQgcGFyYWxsZWwoKCkgPT4ge1xuICAgICAgcmV0dXJuIHN0ZXBzLm1hcChzdGVwID0+IHN0ZXAuZ2V0TGFiZWwoKSk7XG4gICAgfSkpLnRvRXF1YWwoWydPbmUnLCAnVHdvJywgJ1RocmVlJ10pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdvIGZvcndhcmQgd2hlbiBwcmVzc2luZyB0aGUgbmV4dCBidXR0b24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc3RlcHBlciA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdFN0ZXBwZXJIYXJuZXNzKTtcbiAgICBjb25zdCBzdGVwcyA9IGF3YWl0IHN0ZXBwZXIuZ2V0U3RlcHMoKTtcbiAgICBjb25zdCBzZWNvbmRTdGVwID0gc3RlcHNbMV07XG4gICAgY29uc3QgbmV4dEJ1dHRvbiA9IGF3YWl0IHNlY29uZFN0ZXAuZ2V0SGFybmVzcyhNYXRTdGVwcGVyTmV4dEhhcm5lc3MpO1xuXG4gICAgYXdhaXQgc2Vjb25kU3RlcC5zZWxlY3QoKTtcblxuICAgIGV4cGVjdChhd2FpdCBwYXJhbGxlbCgoKSA9PiBzdGVwcy5tYXAoc3RlcCA9PiBzdGVwLmlzU2VsZWN0ZWQoKSkpKS50b0VxdWFsKFtcbiAgICAgIGZhbHNlLFxuICAgICAgdHJ1ZSxcbiAgICAgIGZhbHNlXG4gICAgXSk7XG5cbiAgICBhd2FpdCBuZXh0QnV0dG9uLmNsaWNrKCk7XG5cbiAgICBleHBlY3QoYXdhaXQgcGFyYWxsZWwoKCkgPT4gc3RlcHMubWFwKHN0ZXAgPT4gc3RlcC5pc1NlbGVjdGVkKCkpKSkudG9FcXVhbChbXG4gICAgICBmYWxzZSxcbiAgICAgIGZhbHNlLFxuICAgICAgdHJ1ZVxuICAgIF0pO1xuICB9KTtcbn0pO1xuIl19