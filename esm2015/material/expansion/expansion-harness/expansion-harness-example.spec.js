import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatExpansionPanelHarness, MatAccordionHarness } from '@angular/material/expansion/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatExpansionModule } from '@angular/material/expansion';
import { ExpansionHarnessExample } from './expansion-harness-example';
describe('ExpansionHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatExpansionModule],
            declarations: [ExpansionHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(ExpansionHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should be able to load accordion', () => __awaiter(void 0, void 0, void 0, function* () {
        const accordions = yield loader.getAllHarnesses(MatAccordionHarness);
        expect(accordions.length).toBe(1);
    }));
    it('should be able to load expansion panels', () => __awaiter(void 0, void 0, void 0, function* () {
        const panels = yield loader.getAllHarnesses(MatExpansionPanelHarness);
        expect(panels.length).toBe(1);
    }));
    it('should be able to toggle expansion state of panel', () => __awaiter(void 0, void 0, void 0, function* () {
        const panel = yield loader.getHarness(MatExpansionPanelHarness);
        expect(yield panel.isExpanded()).toBe(false);
        yield panel.toggle();
        expect(yield panel.isExpanded()).toBe(true);
    }));
    it('should be able to get text content of expansion panel', () => __awaiter(void 0, void 0, void 0, function* () {
        const panel = yield loader.getHarness(MatExpansionPanelHarness);
        expect(yield panel.getTextContent()).toBe('I am the content!');
    }));
    it('should be able to get expansion panels of accordion', () => __awaiter(void 0, void 0, void 0, function* () {
        const accordion = yield loader.getHarness(MatAccordionHarness);
        const panels = yield accordion.getExpansionPanels();
        expect(panels.length).toBe(1);
        expect(yield panels[0].getTitle()).toBe('Welcome');
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLWhhcm5lc3MtZXhhbXBsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvZXhwYW5zaW9uL2V4cGFuc2lvbi1oYXJuZXNzL2V4cGFuc2lvbi1oYXJuZXNzLWV4YW1wbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE9BQU8sRUFBb0IsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDOUUsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFDLHdCQUF3QixFQUFFLG1CQUFtQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFFbEcsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBRXBFLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDdkMsSUFBSSxPQUFrRCxDQUFDO0lBQ3ZELElBQUksTUFBcUIsQ0FBQztJQUUxQixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsT0FBTyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBQztJQUM1RixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FDUixZQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztZQUM3QixZQUFZLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztTQUN4QyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2QixPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQzNELE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QixNQUFNLEdBQUcseUJBQXlCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixFQUFFLENBQUMsa0NBQWtDLEVBQUUsR0FBUyxFQUFFO1FBQ2hELE1BQU0sVUFBVSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUUsR0FBUyxFQUFFO1FBQ3ZELE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbURBQW1ELEVBQUUsR0FBUyxFQUFFO1FBQ2pFLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxNQUFNLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNyQixNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1REFBdUQsRUFBRSxHQUFTLEVBQUU7UUFDckUsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDaEUsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxHQUFTLEVBQUU7UUFDbkUsTUFBTSxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDL0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxTQUFTLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsTUFBTSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXN0QmVkLCBDb21wb25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXRFeHBhbnNpb25QYW5lbEhhcm5lc3MsIE1hdEFjY29yZGlvbkhhcm5lc3N9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2V4cGFuc2lvbi90ZXN0aW5nJztcbmltcG9ydCB7SGFybmVzc0xvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nfVxuICBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQge01hdEV4cGFuc2lvbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZXhwYW5zaW9uJztcbmltcG9ydCB7RXhwYW5zaW9uSGFybmVzc0V4YW1wbGV9IGZyb20gJy4vZXhwYW5zaW9uLWhhcm5lc3MtZXhhbXBsZSc7XG5cbmRlc2NyaWJlKCdFeHBhbnNpb25IYXJuZXNzRXhhbXBsZScsICgpID0+IHtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8RXhwYW5zaW9uSGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXRFeHBhbnNpb25Nb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtFeHBhbnNpb25IYXJuZXNzRXhhbXBsZV1cbiAgICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKCk7XG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoRXhwYW5zaW9uSGFybmVzc0V4YW1wbGUpO1xuICAgICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICBsb2FkZXIgPSBUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50LmxvYWRlcihmaXh0dXJlKTtcbiAgICB9KVxuICApO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBsb2FkIGFjY29yZGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhY2NvcmRpb25zID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRBY2NvcmRpb25IYXJuZXNzKTtcbiAgICBleHBlY3QoYWNjb3JkaW9ucy5sZW5ndGgpLnRvQmUoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBsb2FkIGV4cGFuc2lvbiBwYW5lbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcGFuZWxzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRFeHBhbnNpb25QYW5lbEhhcm5lc3MpO1xuICAgIGV4cGVjdChwYW5lbHMubGVuZ3RoKS50b0JlKDEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gdG9nZ2xlIGV4cGFuc2lvbiBzdGF0ZSBvZiBwYW5lbCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwYW5lbCA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdEV4cGFuc2lvblBhbmVsSGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IHBhbmVsLmlzRXhwYW5kZWQoKSkudG9CZShmYWxzZSk7XG4gICAgYXdhaXQgcGFuZWwudG9nZ2xlKCk7XG4gICAgZXhwZWN0KGF3YWl0IHBhbmVsLmlzRXhwYW5kZWQoKSkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGdldCB0ZXh0IGNvbnRlbnQgb2YgZXhwYW5zaW9uIHBhbmVsJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHBhbmVsID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0RXhwYW5zaW9uUGFuZWxIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgcGFuZWwuZ2V0VGV4dENvbnRlbnQoKSkudG9CZSgnSSBhbSB0aGUgY29udGVudCEnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGdldCBleHBhbnNpb24gcGFuZWxzIG9mIGFjY29yZGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhY2NvcmRpb24gPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRBY2NvcmRpb25IYXJuZXNzKTtcbiAgICBjb25zdCBwYW5lbHMgPSBhd2FpdCBhY2NvcmRpb24uZ2V0RXhwYW5zaW9uUGFuZWxzKCk7XG4gICAgZXhwZWN0KHBhbmVscy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgZXhwZWN0KGF3YWl0IHBhbmVsc1swXS5nZXRUaXRsZSgpKS50b0JlKCdXZWxjb21lJyk7XG4gIH0pO1xufSk7XG4iXX0=