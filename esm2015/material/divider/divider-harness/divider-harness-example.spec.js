import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatDividerHarness } from '@angular/material/divider/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatDividerModule } from '@angular/material/divider';
import { DividerHarnessExample } from './divider-harness-example';
describe('DividerHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatDividerModule],
            declarations: [DividerHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(DividerHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all divider harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const dividers = yield loader.getAllHarnesses(MatDividerHarness);
        expect(dividers.length).toBe(2);
    }));
    it('should check if divider is inset', () => __awaiter(void 0, void 0, void 0, function* () {
        const dividers = yield loader.getAllHarnesses(MatDividerHarness);
        expect(yield dividers[0].isInset()).toBe(false);
        expect(yield dividers[1].isInset()).toBe(true);
    }));
    it('should get divider orientation', () => __awaiter(void 0, void 0, void 0, function* () {
        const dividers = yield loader.getAllHarnesses(MatDividerHarness);
        expect(yield dividers[0].getOrientation()).toBe('horizontal');
        expect(yield dividers[1].getOrientation()).toBe('vertical');
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGl2aWRlci1oYXJuZXNzLWV4YW1wbGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL2RpdmlkZXIvZGl2aWRlci1oYXJuZXNzL2RpdmlkZXItaGFybmVzcy1leGFtcGxlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRXBFLE9BQU8sRUFBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBQyxNQUM1RCwyQ0FBMkMsQ0FBQztBQUNuRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVoRSxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLElBQUksT0FBZ0QsQ0FBQztJQUNyRCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7WUFDM0IsWUFBWSxFQUFFLENBQUMscUJBQXFCLENBQUM7U0FDdEMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN6RCxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEIsTUFBTSxHQUFHLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBRUYsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLEdBQVMsRUFBRTtRQUNqRCxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQVMsRUFBRTtRQUNoRCxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRSxNQUFNLENBQUMsTUFBTSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLE1BQU0sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsR0FBUyxFQUFFO1FBQzlDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsTUFBTSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXN0QmVkLCBDb21wb25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXREaXZpZGVySGFybmVzc30gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGl2aWRlci90ZXN0aW5nJztcbmltcG9ydCB7SGFybmVzc0xvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nfVxuICBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQge01hdERpdmlkZXJNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpdmlkZXInO1xuaW1wb3J0IHtEaXZpZGVySGFybmVzc0V4YW1wbGV9IGZyb20gJy4vZGl2aWRlci1oYXJuZXNzLWV4YW1wbGUnO1xuXG5kZXNjcmliZSgnRGl2aWRlckhhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxEaXZpZGVySGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXREaXZpZGVyTW9kdWxlXSxcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbRGl2aWRlckhhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChEaXZpZGVySGFybmVzc0V4YW1wbGUpO1xuICAgICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICBsb2FkZXIgPSBUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50LmxvYWRlcihmaXh0dXJlKTtcbiAgICB9KVxuICApO1xuXG4gIGl0KCdzaG91bGQgbG9hZCBhbGwgZGl2aWRlciBoYXJuZXNzZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGl2aWRlcnMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdERpdmlkZXJIYXJuZXNzKTtcbiAgICBleHBlY3QoZGl2aWRlcnMubGVuZ3RoKS50b0JlKDIpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNoZWNrIGlmIGRpdmlkZXIgaXMgaW5zZXQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGl2aWRlcnMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdERpdmlkZXJIYXJuZXNzKTtcbiAgICBleHBlY3QoYXdhaXQgZGl2aWRlcnNbMF0uaXNJbnNldCgpKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QoYXdhaXQgZGl2aWRlcnNbMV0uaXNJbnNldCgpKS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBkaXZpZGVyIG9yaWVudGF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRpdmlkZXJzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXREaXZpZGVySGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IGRpdmlkZXJzWzBdLmdldE9yaWVudGF0aW9uKCkpLnRvQmUoJ2hvcml6b250YWwnKTtcbiAgICBleHBlY3QoYXdhaXQgZGl2aWRlcnNbMV0uZ2V0T3JpZW50YXRpb24oKSkudG9CZSgndmVydGljYWwnKTtcbiAgfSk7XG59KTtcbiJdfQ==