import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatChipHarness, MatChipListboxHarness } from '@angular/material/chips/testing';
import { parallel } from '@angular/cdk/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting, } from '@angular/platform-browser-dynamic/testing';
import { ChipsHarnessExample } from './chips-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { MatChipsModule } from '@angular/material/chips';
describe('ChipsHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatChipsModule, NoopAnimationsModule],
            declarations: [ChipsHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(ChipsHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should get whether a chip list is disabled', () => __awaiter(void 0, void 0, void 0, function* () {
        const chipList = yield loader.getHarness(MatChipListboxHarness);
        expect(yield chipList.isDisabled()).toBeFalse();
        fixture.componentInstance.isDisabled = true;
        fixture.detectChanges();
        expect(yield chipList.isDisabled()).toBeTrue();
    }));
    it('should get the orientation of a chip list', () => __awaiter(void 0, void 0, void 0, function* () {
        const chipList = yield loader.getHarness(MatChipListboxHarness);
        expect(yield chipList.getOrientation()).toEqual('horizontal');
    }));
    it('should be able to get the selected chips in a list', () => __awaiter(void 0, void 0, void 0, function* () {
        const chipList = yield loader.getHarness(MatChipListboxHarness);
        const chips = yield chipList.getChips();
        expect((yield chipList.getChips({ selected: true })).length).toBe(0);
        yield chips[1].select();
        const selectedChips = yield chipList.getChips({ selected: true });
        expect(yield parallel(() => selectedChips.map(chip => chip.getText()))).toEqual(['Chip 2']);
    }));
    it('should be able to trigger chip removal', () => __awaiter(void 0, void 0, void 0, function* () {
        const chip = yield loader.getHarness(MatChipHarness);
        expect(fixture.componentInstance.remove).not.toHaveBeenCalled();
        yield chip.remove();
        expect(fixture.componentInstance.remove).toHaveBeenCalled();
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcHMtaGFybmVzcy1leGFtcGxlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9tYXRlcmlhbC9jaGlwcy9jaGlwcy1oYXJuZXNzL2NoaXBzLWhhcm5lc3MtZXhhbXBsZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFvQixZQUFZLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUMsY0FBYyxFQUFFLHFCQUFxQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDdEYsT0FBTyxFQUFnQixRQUFRLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RCxPQUFPLEVBQ0wsMkJBQTJCLEVBQzNCLDZCQUE2QixHQUM5QixNQUFNLDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUV2RCxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLElBQUksT0FBOEMsQ0FBQztJQUNuRCxJQUFJLE1BQXFCLENBQUM7SUFDMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsY0FBYyxFQUFFLG9CQUFvQixDQUFDO1lBQy9DLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDO1NBQ3BDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFTLEVBQUU7UUFDMUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFFaEUsTUFBTSxDQUFDLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFaEQsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDNUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXhCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsR0FBUyxFQUFFO1FBQ3pELE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRWhFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLEdBQVMsRUFBRTtRQUNsRSxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNoRSxNQUFNLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUV4QyxNQUFNLENBQUMsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV4QixNQUFNLGFBQWEsR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUNoRSxNQUFNLENBQUMsTUFBTSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlGLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0NBQXdDLEVBQUUsR0FBUyxFQUFFO1FBQ3RELE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM5RCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Rlc3RCZWQsIENvbXBvbmVudEZpeHR1cmUsIHdhaXRGb3JBc3luY30gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7VGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcvdGVzdGJlZCc7XG5pbXBvcnQge01hdENoaXBIYXJuZXNzLCBNYXRDaGlwTGlzdGJveEhhcm5lc3N9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NoaXBzL3Rlc3RpbmcnO1xuaW1wb3J0IHtIYXJuZXNzTG9hZGVyLCBwYXJhbGxlbH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtcbiAgQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLFxuICBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZyxcbn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuaW1wb3J0IHtDaGlwc0hhcm5lc3NFeGFtcGxlfSBmcm9tICcuL2NoaXBzLWhhcm5lc3MtZXhhbXBsZSc7XG5pbXBvcnQge05vb3BBbmltYXRpb25zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtNYXRDaGlwc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY2hpcHMnO1xuXG5kZXNjcmliZSgnQ2hpcHNIYXJuZXNzRXhhbXBsZScsICgpID0+IHtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8Q2hpcHNIYXJuZXNzRXhhbXBsZT47XG4gIGxldCBsb2FkZXI6IEhhcm5lc3NMb2FkZXI7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbTWF0Q2hpcHNNb2R1bGUsIE5vb3BBbmltYXRpb25zTW9kdWxlXSxcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbQ2hpcHNIYXJuZXNzRXhhbXBsZV1cbiAgICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKCk7XG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoQ2hpcHNIYXJuZXNzRXhhbXBsZSk7XG4gICAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQubG9hZGVyKGZpeHR1cmUpO1xuICAgIH0pXG4gICk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgd2hldGhlciBhIGNoaXAgbGlzdCBpcyBkaXNhYmxlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjaGlwTGlzdCA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdENoaXBMaXN0Ym94SGFybmVzcyk7XG5cbiAgICBleHBlY3QoYXdhaXQgY2hpcExpc3QuaXNEaXNhYmxlZCgpKS50b0JlRmFsc2UoKTtcblxuICAgIGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2UuaXNEaXNhYmxlZCA9IHRydWU7XG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICBleHBlY3QoYXdhaXQgY2hpcExpc3QuaXNEaXNhYmxlZCgpKS50b0JlVHJ1ZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCB0aGUgb3JpZW50YXRpb24gb2YgYSBjaGlwIGxpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2hpcExpc3QgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRDaGlwTGlzdGJveEhhcm5lc3MpO1xuXG4gICAgZXhwZWN0KGF3YWl0IGNoaXBMaXN0LmdldE9yaWVudGF0aW9uKCkpLnRvRXF1YWwoJ2hvcml6b250YWwnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGdldCB0aGUgc2VsZWN0ZWQgY2hpcHMgaW4gYSBsaXN0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGNoaXBMaXN0ID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0Q2hpcExpc3Rib3hIYXJuZXNzKTtcbiAgICBjb25zdCBjaGlwcyA9IGF3YWl0IGNoaXBMaXN0LmdldENoaXBzKCk7XG5cbiAgICBleHBlY3QoKGF3YWl0IGNoaXBMaXN0LmdldENoaXBzKHtzZWxlY3RlZDogdHJ1ZX0pKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgYXdhaXQgY2hpcHNbMV0uc2VsZWN0KCk7XG5cbiAgICBjb25zdCBzZWxlY3RlZENoaXBzID0gYXdhaXQgY2hpcExpc3QuZ2V0Q2hpcHMoe3NlbGVjdGVkOiB0cnVlfSk7XG4gICAgZXhwZWN0KGF3YWl0IHBhcmFsbGVsKCgpID0+IHNlbGVjdGVkQ2hpcHMubWFwKGNoaXAgPT4gY2hpcC5nZXRUZXh0KCkpKSkudG9FcXVhbChbJ0NoaXAgMiddKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIHRyaWdnZXIgY2hpcCByZW1vdmFsJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGNoaXAgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRDaGlwSGFybmVzcyk7XG4gICAgZXhwZWN0KGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2UucmVtb3ZlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGF3YWl0IGNoaXAucmVtb3ZlKCk7XG4gICAgZXhwZWN0KGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2UucmVtb3ZlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXX0=