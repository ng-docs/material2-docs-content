import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatSelectHarness } from '@angular/material/select/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatSelectModule } from '@angular/material/select';
import { SelectHarnessExample } from './select-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
describe('SelectHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatSelectModule, NoopAnimationsModule],
            declarations: [SelectHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(SelectHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all select harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const selects = yield loader.getAllHarnesses(MatSelectHarness);
        expect(selects.length).toBe(1);
    }));
    it('should be able to check whether a select is in multi-selection mode', () => __awaiter(void 0, void 0, void 0, function* () {
        const select = yield loader.getHarness(MatSelectHarness);
        expect(yield select.isMultiple()).toBe(false);
    }));
    it('should be able to open and close a select', () => __awaiter(void 0, void 0, void 0, function* () {
        const select = yield loader.getHarness(MatSelectHarness);
        expect(yield select.isOpen()).toBe(false);
        yield select.open();
        expect(yield select.isOpen()).toBe(true);
        yield select.close();
        expect(yield select.isOpen()).toBe(false);
    }));
    it('should be able to get the value text from a select', () => __awaiter(void 0, void 0, void 0, function* () {
        const select = yield loader.getHarness(MatSelectHarness);
        yield select.open();
        const options = yield select.getOptions();
        yield options[2].click();
        expect(yield select.getValueText()).toBe('Tacos');
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWhhcm5lc3MtZXhhbXBsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvc2VsZWN0L3NlbGVjdC1oYXJuZXNzL3NlbGVjdC1oYXJuZXNzLWV4YW1wbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE9BQU8sRUFBb0IsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDOUUsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFFbEUsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUUxRSxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksT0FBK0MsQ0FBQztJQUNwRCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLG9CQUFvQixDQUFDO1lBQ2hELFlBQVksRUFBRSxDQUFDLG9CQUFvQixDQUFDO1NBQ3JDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDeEQsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFTLEVBQUU7UUFDaEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxRUFBcUUsRUFBRSxHQUFTLEVBQUU7UUFDbkYsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFekQsTUFBTSxDQUFDLE1BQU0sTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsR0FBUyxFQUFFO1FBQ3pELE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXpELE1BQU0sQ0FBQyxNQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQyxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsTUFBTSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFekMsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsTUFBTSxDQUFDLE1BQU0sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUUsR0FBUyxFQUFFO1FBQ2xFLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLE1BQU0sT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRTFDLE1BQU0sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXpCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Rlc3RCZWQsIENvbXBvbmVudEZpeHR1cmUsIHdhaXRGb3JBc3luY30gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7VGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcvdGVzdGJlZCc7XG5pbXBvcnQge01hdFNlbGVjdEhhcm5lc3N9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NlbGVjdC90ZXN0aW5nJztcbmltcG9ydCB7SGFybmVzc0xvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nfVxuICBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQge01hdFNlbGVjdE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2VsZWN0JztcbmltcG9ydCB7U2VsZWN0SGFybmVzc0V4YW1wbGV9IGZyb20gJy4vc2VsZWN0LWhhcm5lc3MtZXhhbXBsZSc7XG5pbXBvcnQge05vb3BBbmltYXRpb25zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xuXG5kZXNjcmliZSgnU2VsZWN0SGFybmVzc0V4YW1wbGUnLCAoKSA9PiB7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFNlbGVjdEhhcm5lc3NFeGFtcGxlPjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIFRlc3RCZWQuaW5pdFRlc3RFbnZpcm9ubWVudChCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nKCkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbTWF0U2VsZWN0TW9kdWxlLCBOb29wQW5pbWF0aW9uc01vZHVsZV0sXG4gICAgICAgIGRlY2xhcmF0aW9uczogW1NlbGVjdEhhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChTZWxlY3RIYXJuZXNzRXhhbXBsZSk7XG4gICAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIGxvYWRlciA9IFRlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnQubG9hZGVyKGZpeHR1cmUpO1xuICAgIH0pXG4gICk7XG5cbiAgaXQoJ3Nob3VsZCBsb2FkIGFsbCBzZWxlY3QgaGFybmVzc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdHMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdFNlbGVjdEhhcm5lc3MpO1xuICAgIGV4cGVjdChzZWxlY3RzLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGNoZWNrIHdoZXRoZXIgYSBzZWxlY3QgaXMgaW4gbXVsdGktc2VsZWN0aW9uIG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0U2VsZWN0SGFybmVzcyk7XG5cbiAgICBleHBlY3QoYXdhaXQgc2VsZWN0LmlzTXVsdGlwbGUoKSkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBvcGVuIGFuZCBjbG9zZSBhIHNlbGVjdCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzZWxlY3QgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRTZWxlY3RIYXJuZXNzKTtcblxuICAgIGV4cGVjdChhd2FpdCBzZWxlY3QuaXNPcGVuKCkpLnRvQmUoZmFsc2UpO1xuXG4gICAgYXdhaXQgc2VsZWN0Lm9wZW4oKTtcbiAgICBleHBlY3QoYXdhaXQgc2VsZWN0LmlzT3BlbigpKS50b0JlKHRydWUpO1xuXG4gICAgYXdhaXQgc2VsZWN0LmNsb3NlKCk7XG4gICAgZXhwZWN0KGF3YWl0IHNlbGVjdC5pc09wZW4oKSkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBnZXQgdGhlIHZhbHVlIHRleHQgZnJvbSBhIHNlbGVjdCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzZWxlY3QgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRTZWxlY3RIYXJuZXNzKTtcbiAgICBhd2FpdCBzZWxlY3Qub3BlbigpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBhd2FpdCBzZWxlY3QuZ2V0T3B0aW9ucygpO1xuXG4gICAgYXdhaXQgb3B0aW9uc1syXS5jbGljaygpO1xuXG4gICAgZXhwZWN0KGF3YWl0IHNlbGVjdC5nZXRWYWx1ZVRleHQoKSkudG9CZSgnVGFjb3MnKTtcbiAgfSk7XG59KTtcbiJdfQ==