import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatSlideToggleHarness } from '@angular/material/slide-toggle/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { SlideToggleHarnessExample } from './slide-toggle-harness-example';
import { ReactiveFormsModule } from '@angular/forms';
describe('SlideToggleHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatSlideToggleModule, ReactiveFormsModule],
            declarations: [SlideToggleHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(SlideToggleHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load all slide-toggle harnesses', () => __awaiter(void 0, void 0, void 0, function* () {
        const slideToggles = yield loader.getAllHarnesses(MatSlideToggleHarness);
        expect(slideToggles.length).toBe(2);
    }));
    it('should load slide-toggle with name', () => __awaiter(void 0, void 0, void 0, function* () {
        const slideToggles = yield loader.getAllHarnesses(MatSlideToggleHarness.with({ name: 'first-name' }));
        expect(slideToggles.length).toBe(1);
        expect(yield slideToggles[0].getLabelText()).toBe('First');
    }));
    it('should get disabled state', () => __awaiter(void 0, void 0, void 0, function* () {
        const [enabledToggle, disabledToggle] = yield loader.getAllHarnesses(MatSlideToggleHarness);
        expect(yield enabledToggle.isDisabled()).toBe(false);
        expect(yield disabledToggle.isDisabled()).toBe(true);
    }));
    it('should get label text', () => __awaiter(void 0, void 0, void 0, function* () {
        const [firstToggle, secondToggle] = yield loader.getAllHarnesses(MatSlideToggleHarness);
        expect(yield firstToggle.getLabelText()).toBe('First');
        expect(yield secondToggle.getLabelText()).toBe('Second');
    }));
    it('should toggle slide-toggle', () => __awaiter(void 0, void 0, void 0, function* () {
        fixture.componentInstance.disabled = false;
        const [checkedToggle, uncheckedToggle] = yield loader.getAllHarnesses(MatSlideToggleHarness);
        yield checkedToggle.toggle();
        yield uncheckedToggle.toggle();
        expect(yield checkedToggle.isChecked()).toBe(false);
        expect(yield uncheckedToggle.isChecked()).toBe(true);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUtdG9nZ2xlLWhhcm5lc3MtZXhhbXBsZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvbWF0ZXJpYWwvc2xpZGUtdG9nZ2xlL3NsaWRlLXRvZ2dsZS1oYXJuZXNzL3NsaWRlLXRvZ2dsZS1oYXJuZXNzLWV4YW1wbGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE9BQU8sRUFBb0IsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDOUUsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sd0NBQXdDLENBQUM7QUFFN0UsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7SUFDekMsSUFBSSxPQUFvRCxDQUFDO0lBQ3pELElBQUksTUFBcUIsQ0FBQztJQUUxQixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsT0FBTyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBQztJQUM1RixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FDUixZQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxtQkFBbUIsQ0FBQztZQUNwRCxZQUFZLEVBQUUsQ0FBQyx5QkFB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b25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXRTbGlkZVRvZ2dsZUhhcm5lc3N9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NsaWRlLXRvZ2dsZS90ZXN0aW5nJztcbmltcG9ydCB7SGFybmVzc0xvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nfVxuICBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQge01hdFNsaWRlVG9nZ2xlTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zbGlkZS10b2dnbGUnO1xuaW1wb3J0IHtTbGlkZVRvZ2dsZUhhcm5lc3NFeGFtcGxlfSBmcm9tICcuL3NsaWRlLXRvZ2dsZS1oYXJuZXNzLWV4YW1wbGUnO1xuaW1wb3J0IHtSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmRlc2NyaWJlKCdTbGlkZVRvZ2dsZUhhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxTbGlkZVRvZ2dsZUhhcm5lc3NFeGFtcGxlPjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIFRlc3RCZWQuaW5pdFRlc3RFbnZpcm9ubWVudChCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nKCkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbTWF0U2xpZGVUb2dnbGVNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtTbGlkZVRvZ2dsZUhhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChTbGlkZVRvZ2dsZUhhcm5lc3NFeGFtcGxlKTtcbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgbG9hZGVyID0gVGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudC5sb2FkZXIoZml4dHVyZSk7XG4gICAgfSlcbiAgKTtcblxuICBpdCgnc2hvdWxkIGxvYWQgYWxsIHNsaWRlLXRvZ2dsZSBoYXJuZXNzZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2xpZGVUb2dnbGVzID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRTbGlkZVRvZ2dsZUhhcm5lc3MpO1xuICAgIGV4cGVjdChzbGlkZVRvZ2dsZXMubGVuZ3RoKS50b0JlKDIpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGxvYWQgc2xpZGUtdG9nZ2xlIHdpdGggbmFtZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzbGlkZVRvZ2dsZXMgPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKFxuICAgICAgTWF0U2xpZGVUb2dnbGVIYXJuZXNzLndpdGgoe25hbWU6ICdmaXJzdC1uYW1lJ30pKTtcbiAgICBleHBlY3Qoc2xpZGVUb2dnbGVzLmxlbmd0aCkudG9CZSgxKTtcbiAgICBleHBlY3QoYXdhaXQgc2xpZGVUb2dnbGVzWzBdLmdldExhYmVsVGV4dCgpKS50b0JlKCdGaXJzdCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBkaXNhYmxlZCBzdGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBbZW5hYmxlZFRvZ2dsZSwgZGlzYWJsZWRUb2dnbGVdID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRTbGlkZVRvZ2dsZUhhcm5lc3MpO1xuICAgIGV4cGVjdChhd2FpdCBlbmFibGVkVG9nZ2xlLmlzRGlzYWJsZWQoKSkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KGF3YWl0IGRpc2FibGVkVG9nZ2xlLmlzRGlzYWJsZWQoKSkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgbGFiZWwgdGV4dCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBbZmlyc3RUb2dnbGUsIHNlY29uZFRvZ2dsZV0gPSBhd2FpdCBsb2FkZXIuZ2V0QWxsSGFybmVzc2VzKE1hdFNsaWRlVG9nZ2xlSGFybmVzcyk7XG4gICAgZXhwZWN0KGF3YWl0IGZpcnN0VG9nZ2xlLmdldExhYmVsVGV4dCgpKS50b0JlKCdGaXJzdCcpO1xuICAgIGV4cGVjdChhd2FpdCBzZWNvbmRUb2dnbGUuZ2V0TGFiZWxUZXh0KCkpLnRvQmUoJ1NlY29uZCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRvZ2dsZSBzbGlkZS10b2dnbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIGNvbnN0IFtjaGVja2VkVG9nZ2xlLCB1bmNoZWNrZWRUb2dnbGVdID0gYXdhaXQgbG9hZGVyLmdldEFsbEhhcm5lc3NlcyhNYXRTbGlkZVRvZ2dsZUhhcm5lc3MpO1xuICAgIGF3YWl0IGNoZWNrZWRUb2dnbGUudG9nZ2xlKCk7XG4gICAgYXdhaXQgdW5jaGVja2VkVG9nZ2xlLnRvZ2dsZSgpO1xuICAgIGV4cGVjdChhd2FpdCBjaGVja2VkVG9nZ2xlLmlzQ2hlY2tlZCgpKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QoYXdhaXQgdW5jaGVja2VkVG9nZ2xlLmlzQ2hlY2tlZCgpKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuIl19