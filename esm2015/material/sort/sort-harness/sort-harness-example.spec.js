import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatSortHarness } from '@angular/material/sort/testing';
import { parallel } from '@angular/cdk/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatSortModule } from '@angular/material/sort';
import { SortHarnessExample } from './sort-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
describe('SortHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatSortModule, NoopAnimationsModule],
            declarations: [SortHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(SortHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should load harness for mat-sort', () => __awaiter(void 0, void 0, void 0, function* () {
        const sorts = yield loader.getAllHarnesses(MatSortHarness);
        expect(sorts.length).toBe(1);
    }));
    it('should be able to filter headers by their sorted state', () => __awaiter(void 0, void 0, void 0, function* () {
        const sort = yield loader.getHarness(MatSortHarness);
        let headers = yield sort.getSortHeaders({ sortDirection: '' });
        expect(headers.length).toBe(5);
        yield headers[0].click();
        headers = yield sort.getSortHeaders({ sortDirection: 'asc' });
        expect(headers.length).toBe(1);
    }));
    it('should be able to get the label of a header', () => __awaiter(void 0, void 0, void 0, function* () {
        const sort = yield loader.getHarness(MatSortHarness);
        const headers = yield sort.getSortHeaders();
        const labels = yield parallel(() => headers.map(header => header.getLabel()));
        expect(labels).toEqual(['Dessert', 'Calories', 'Fat', 'Carbs', 'Protein']);
    }));
    it('should get the disabled state of a header', () => __awaiter(void 0, void 0, void 0, function* () {
        const sort = yield loader.getHarness(MatSortHarness);
        const thirdHeader = (yield sort.getSortHeaders())[2];
        expect(yield thirdHeader.isDisabled()).toBe(false);
        fixture.componentInstance.disableThirdHeader = true;
        fixture.detectChanges();
        expect(yield thirdHeader.isDisabled()).toBe(true);
    }));
    it('should get the sorted direction of a header', () => __awaiter(void 0, void 0, void 0, function* () {
        const sort = yield loader.getHarness(MatSortHarness);
        const secondHeader = (yield sort.getSortHeaders())[1];
        expect(yield secondHeader.getSortDirection()).toBe('');
        yield secondHeader.click();
        expect(yield secondHeader.getSortDirection()).toBe('asc');
        yield secondHeader.click();
        expect(yield secondHeader.getSortDirection()).toBe('desc');
    }));
});
//# sourceMappingURL=data:application/json;base64,