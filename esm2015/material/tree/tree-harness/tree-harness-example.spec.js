import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatTreeHarness } from '@angular/material/tree/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { MatTreeModule } from '@angular/material/tree';
import { TreeHarnessExample } from './tree-harness-example';
import { MatIconModule } from '@angular/material/icon';
describe('TreeHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatTreeModule, MatIconModule],
            declarations: [TreeHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(TreeHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should get correct number of children and descendants', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield loader.getHarness(MatTreeHarness);
        const treeDescendants = yield tree.getNodes();
        // flat nodes are not rendered until expanded
        expect(treeDescendants.length).toBe(2);
        yield treeDescendants[0].expand();
        expect((yield tree.getNodes()).length).toBe(5);
    }));
    it('should correctly get correct node with text', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield loader.getHarness(MatTreeHarness);
        const treeNodes = yield tree.getNodes({ text: /Flat Group/ });
        expect(treeNodes.length).toBe(2);
        const secondGroup = treeNodes[0];
        expect(yield secondGroup.getText()).toBe('Flat Group 1');
        expect(yield secondGroup.getLevel()).toBe(1);
        expect(yield secondGroup.isDisabled()).toBe(false);
        expect(yield secondGroup.isExpanded()).toBe(false);
    }));
    it('should correctly get tree structure', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield loader.getHarness(MatTreeHarness);
        expect(yield tree.getTreeStructure()).toEqual({
            children: [
                { text: 'Flat Group 1' },
                { text: 'Flat Group 2' }
            ]
        });
        const firstGroup = (yield tree.getNodes({ text: /Flat Group 1/ }))[0];
        yield firstGroup.expand();
        expect(yield tree.getTreeStructure()).toEqual({
            children: [
                {
                    text: 'Flat Group 1',
                    children: [
                        { text: 'Flat Leaf 1.1' },
                        { text: 'Flat Leaf 1.2' },
                        { text: 'Flat Leaf 1.3' }
                    ]
                },
                { text: 'Flat Group 2' }
            ]
        });
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1oYXJuZXNzLWV4YW1wbGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL3RyZWUvdHJlZS1oYXJuZXNzL3RyZWUtaGFybmVzcy1leGFtcGxlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU5RCxPQUFPLEVBQUMsMkJBQTJCLEVBQUUsNkJBQTZCLEVBQUMsTUFDNUQsMkNBQTJDLENBQUM7QUFDbkQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUVyRCxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLElBQUksT0FBNkMsQ0FBQztJQUNsRCxJQUFJLE1BQXFCLENBQUM7SUFFMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQztZQUN2QyxZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztTQUNuQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztR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QUFDO3FCQUN4QjtpQkFDRjtnQkFDRCxFQUFDLElBQUksRUFBRSxjQUFjLEVBQUM7YUFDdkI7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Rlc3RCZWQsIENvbXBvbmVudEZpeHR1cmUsIHdhaXRGb3JBc3luY30gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7VGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcvdGVzdGJlZCc7XG5pbXBvcnQge01hdFRyZWVIYXJuZXNzfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90cmVlL3Rlc3RpbmcnO1xuaW1wb3J0IHtIYXJuZXNzTG9hZGVyfSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZyc7XG5pbXBvcnQge0Jyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3Rpbmd9XG4gIGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYy90ZXN0aW5nJztcbmltcG9ydCB7TWF0VHJlZU1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdHJlZSc7XG5pbXBvcnQge1RyZWVIYXJuZXNzRXhhbXBsZX0gZnJvbSAnLi90cmVlLWhhcm5lc3MtZXhhbXBsZSc7XG5pbXBvcnQge01hdEljb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2ljb24nO1xuXG5kZXNjcmliZSgnVHJlZUhhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxUcmVlSGFybmVzc0V4YW1wbGU+O1xuICBsZXQgbG9hZGVyOiBIYXJuZXNzTG9hZGVyO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXRUcmVlTW9kdWxlLCBNYXRJY29uTW9kdWxlXSxcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbVHJlZUhhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChUcmVlSGFybmVzc0V4YW1wbGUpO1xuICAgICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICBsb2FkZXIgPSBUZXN0YmVkSGFybmVzc0Vudmlyb25tZW50LmxvYWRlcihmaXh0dXJlKTtcbiAgICB9KVxuICApO1xuXG4gIGl0KCdzaG91bGQgZ2V0IGNvcnJlY3QgbnVtYmVyIG9mIGNoaWxkcmVuIGFuZCBkZXNjZW5kYW50cycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0cmVlID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0VHJlZUhhcm5lc3MpO1xuICAgIGNvbnN0IHRyZWVEZXNjZW5kYW50cyA9IGF3YWl0IHRyZWUuZ2V0Tm9kZXMoKTtcblxuICAgIC8vIGZsYXQgbm9kZXMgYXJlIG5vdCByZW5kZXJlZCB1bnRpbCBleHBhbmRlZFxuICAgIGV4cGVjdCh0cmVlRGVzY2VuZGFudHMubGVuZ3RoKS50b0JlKDIpO1xuXG4gICAgYXdhaXQgdHJlZURlc2NlbmRhbnRzWzBdLmV4cGFuZCgpO1xuXG4gICAgZXhwZWN0KChhd2FpdCB0cmVlLmdldE5vZGVzKCkpLmxlbmd0aCkudG9CZSg1KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjb3JyZWN0bHkgZ2V0IGNvcnJlY3Qgbm9kZSB3aXRoIHRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdHJlZSA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdFRyZWVIYXJuZXNzKTtcbiAgICBjb25zdCB0cmVlTm9kZXMgPSBhd2FpdCB0cmVlLmdldE5vZGVzKHt0ZXh0OiAvRmxhdCBHcm91cC99KTtcbiAgICBleHBlY3QodHJlZU5vZGVzLmxlbmd0aCkudG9CZSgyKTtcbiAgICBjb25zdCBzZWNvbmRHcm91cCA9IHRyZWVOb2Rlc1swXTtcblxuICAgIGV4cGVjdChhd2FpdCBzZWNvbmRHcm91cC5nZXRUZXh0KCkpLnRvQmUoJ0ZsYXQgR3JvdXAgMScpO1xuICAgIGV4cGVjdChhd2FpdCBzZWNvbmRHcm91cC5nZXRMZXZlbCgpKS50b0JlKDEpO1xuICAgIGV4cGVjdChhd2FpdCBzZWNvbmRHcm91cC5pc0Rpc2FibGVkKCkpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChhd2FpdCBzZWNvbmRHcm91cC5pc0V4cGFuZGVkKCkpLnRvQmUoZmFsc2UpO1xuICB9KTtcblxuICBpdCAoJ3Nob3VsZCBjb3JyZWN0bHkgZ2V0IHRyZWUgc3RydWN0dXJlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRyZWUgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRUcmVlSGFybmVzcyk7XG5cbiAgICBleHBlY3QoYXdhaXQgdHJlZS5nZXRUcmVlU3RydWN0dXJlKCkpLnRvRXF1YWwoe1xuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAge3RleHQ6ICdGbGF0IEdyb3VwIDEnfSxcbiAgICAgICAge3RleHQ6ICdGbGF0IEdyb3VwIDInfVxuICAgICAgXVxuICAgIH0pO1xuXG4gICAgY29uc3QgZmlyc3RHcm91cCA9IChhd2FpdCB0cmVlLmdldE5vZGVzKHt0ZXh0OiAvRmxhdCBHcm91cCAxL30pKVswXTtcbiAgICBhd2FpdCBmaXJzdEdyb3VwLmV4cGFuZCgpO1xuXG4gICAgZXhwZWN0KGF3YWl0IHRyZWUuZ2V0VHJlZVN0cnVjdHVyZSgpKS50b0VxdWFsKHtcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0ZXh0OiAnRmxhdCBHcm91cCAxJyxcbiAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAge3RleHQ6ICdGbGF0IExlYWYgMS4xJ30sXG4gICAgICAgICAgICB7dGV4dDogJ0ZsYXQgTGVhZiAxLjInfSxcbiAgICAgICAgICAgIHt0ZXh0OiAnRmxhdCBMZWFmIDEuMyd9XG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7dGV4dDogJ0ZsYXQgR3JvdXAgMid9XG4gICAgICBdXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=