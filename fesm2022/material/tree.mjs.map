{"version":3,"file":"tree.mjs","sources":["../../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.ts","../../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.html","../../../../../../../src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.ts","../../../../../../../src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.html","../../../../../../../src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.ts","../../../../../../../src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.html","../../../../../../../src/components-examples/material/tree/tree-harness/tree-harness-example.ts","../../../../../../../src/components-examples/material/tree/tree-harness/tree-harness-example.html","../../../../../../../src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.ts","../../../../../../../src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.html","../../../../../../../src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.ts","../../../../../../../src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.html","../../../../../../../src/components-examples/material/tree/tree_public_index.ts"],"sourcesContent":["import {SelectionModel} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatButtonModule} from '@angular/material/button';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Node for to-do item\n *\n * 待办事项的节点\n *\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  item: string;\n}\n\n/**\n * Flat to-do item node with expandable and level information\n *\n * 具有可扩展和级别信息的平面待办事项节点\n *\n */\nexport class TodoItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n}\n\n/**\n * The Json object for to-do list data.\n *\n * 待办事项列表数据的 Json 对象。\n *\n */\nconst TREE_DATA = {\n  Groceries: {\n    'Almond Meal flour': null,\n    'Organic eggs': null,\n    'Protein Powder': null,\n    Fruits: {\n      Apple: null,\n      Berries: ['Blueberry', 'Raspberry'],\n      Orange: null,\n    },\n  },\n  Reminders: ['Cook dinner', 'Read the Material Design spec', 'Upgrade Application to Angular'],\n};\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n *\n * 检查列表数据库，它可以构建一个树状结构的 Json 对象。 Json 对象中的每个节点代表一个待办事项或一个类别。如果一个节点是一个类别，它有子条目，并且可以在该类别下添加新条目。\n *\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] {\n    return this.dataChange.value;\n  }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize() {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   *\n   * 构建文件结构树。该 `value` 是 Json 对象，或 Json 对象的子树。返回值是 `TodoItemNode` 的列表。\n   *\n   */\n  buildFileTree(obj: {[key: string]: any}, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const value = obj[key];\n      const node = new TodoItemNode();\n      node.item = key;\n\n      if (value != null) {\n        if (typeof value === 'object') {\n          node.children = this.buildFileTree(value, level + 1);\n        } else {\n          node.item = value;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /**\n   * Add an item to to-do list\n   *\n   * 将条目添加到待办事项列表\n   *\n   */\n  insertItem(parent: TodoItemNode, name: string) {\n    if (parent.children) {\n      parent.children.push({item: name} as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string) {\n    node.item = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'tree-checklist-example',\n  templateUrl: 'tree-checklist-example.html',\n  styleUrls: ['tree-checklist-example.css'],\n  providers: [ChecklistDatabase],\n  standalone: true,\n  imports: [\n    MatTreeModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n  ],\n})\nexport class TreeChecklistExample {\n  /**\n   * Map from flat node to nested node. This helps us finding the nested node to be modified\n   *\n   * 从平面节点映射到嵌套节点。这有助于我们找到要修改的嵌套节点\n   *\n   */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /**\n   * Map from nested node to flattened node. This helps us to keep the same object for selection\n   *\n   * 从嵌套节点映射到平面节点。这有助于我们保留相同的对象以供选择\n   *\n   */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /**\n   * A selected parent node to be inserted\n   *\n   * 要插入的已选定父节点\n   *\n   */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /**\n   * The new item's name\n   *\n   * 新条目的名称\n   *\n   */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /**\n   * The selection for checklist\n   *\n   * 检查的选择结果\n   *\n   */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\n\n  constructor(private _database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren,\n    );\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   *\n   * 将嵌套节点转换为平面节点的转换器。在 map 中记录这些节点以备后用。\n   *\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode =\n      existingNode && existingNode.item === node.item ? existingNode : new TodoItemFlatNode();\n    flatNode.item = node.item;\n    flatNode.level = level;\n    flatNode.expandable = !!node.children?.length;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  };\n\n  /**\n   * Whether all the descendants of the node are selected.\n   *\n   * 节点的所有后代是否都被选定了。\n   *\n   */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected =\n      descendants.length > 0 &&\n      descendants.every(child => {\n        return this.checklistSelection.isSelected(child);\n      });\n    return descAllSelected;\n  }\n\n  /**\n   * Whether part of the descendants are selected\n   *\n   * 是否选定了部分后代\n   *\n   */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /**\n   * Toggle the to-do item selection. Select/deselect all the descendants node\n   *\n   * 切换待办事项选择结果。选定/取消选定所有后代节点\n   *\n   */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n\n  /**\n   * Toggle a leaf to-do item selection. Check all the parents to see if they changed\n   *\n   * 切换叶待办事项的选择结果。检查所有的父母，看看它们是否改变了\n   *\n   */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /**\n   * Check root node checked state and change it accordingly\n   *\n   * 检查根节点的勾选状态并相应地更改它\n   *\n   */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected =\n      descendants.length > 0 &&\n      descendants.every(child => {\n        return this.checklistSelection.isSelected(child);\n      });\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Select the category so we can insert the new item.\n   *\n   * 选定此类别，以便我们可以插入新条目。\n   *\n   */\n  addNewItem(node: TodoItemFlatNode) {\n    const parentNode = this.flatNodeMap.get(node);\n    this._database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /**\n   * Save the node to database\n   *\n   * 将节点保存到数据库\n   *\n   */\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\n    const nestedNode = this.flatNodeMap.get(node);\n    this._database.updateItem(nestedNode!, itemValue);\n  }\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-checkbox class=\"checklist-leaf-node\"\n                  [checked]=\"checklistSelection.isSelected(node)\"\n                  (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-form-field>\n      <mat-label>New item...</mat-label>\n      <input matInput #itemValue placeholder=\"Ex. Lettuce\">\n    </mat-form-field>\n    <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.item\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                  [indeterminate]=\"descendantsPartiallySelected(node)\"\n                  (change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n    <button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button>\n  </mat-tree-node>\n</mat-tree>\n","import {CollectionViewer, SelectionChange, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {NgIf} from '@angular/common';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTreeModule} from '@angular/material/tree';\n\n/**\n * Flat node with expandable and level information\n *\n * 具有可扩展和级别信息的平面节点\n *\n */\nexport class DynamicFlatNode {\n  constructor(\n    public item: string,\n    public level = 1,\n    public expandable = false,\n    public isLoading = false,\n  ) {}\n}\n\n/**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n *\n * 动态数据的数据库。当在树中扩展一个节点时，数据源将需要从数据库中获取后代数据。\n *\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicDatabase {\n  dataMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple']],\n  ]);\n\n  rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\n\n  /**\n   * Initial data from database\n   *\n   * 来自数据库的初始数据\n   *\n   */\n  initialData(): DynamicFlatNode[] {\n    return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\n  }\n\n  getChildren(node: string): string[] | undefined {\n    return this.dataMap.get(node);\n  }\n\n  isExpandable(node: string): boolean {\n    return this.dataMap.has(node);\n  }\n}\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children \\(a list of files or directories\\).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n *\n * 文件数据库，它可以从字符串构建一个树状结构的 Json 对象。 Json 对象中的每个节点代表一个文件或目录。对于文件，它具有文件名和类型。对于一个目录，它有文件名和子目录（文件或目录的列表）。其输入将是一个 json 对象字符串，其输出是一个具有嵌套结构的 `FileNode` 列表。\n *\n */\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\n  dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\n\n  get data(): DynamicFlatNode[] {\n    return this.dataChange.value;\n  }\n  set data(value: DynamicFlatNode[]) {\n    this._treeControl.dataNodes = value;\n    this.dataChange.next(value);\n  }\n\n  constructor(\n    private _treeControl: FlatTreeControl<DynamicFlatNode>,\n    private _database: DynamicDatabase,\n  ) {}\n\n  connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n    this._treeControl.expansionModel.changed.subscribe(change => {\n      if (\n        (change as SelectionChange<DynamicFlatNode>).added ||\n        (change as SelectionChange<DynamicFlatNode>).removed\n      ) {\n        this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n      }\n    });\n\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {}\n\n  /**\n   * Handle expand/collapse behaviors\n   *\n   * 处理展开/折叠行为\n   *\n   */\n  handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n    if (change.added) {\n      change.added.forEach(node => this.toggleNode(node, true));\n    }\n    if (change.removed) {\n      change.removed\n        .slice()\n        .reverse()\n        .forEach(node => this.toggleNode(node, false));\n    }\n  }\n\n  /**\n   * Toggle the node, remove from display list\n   *\n   * 切换节点，从显示列表中移除\n   *\n   */\n  toggleNode(node: DynamicFlatNode, expand: boolean) {\n    const children = this._database.getChildren(node.item);\n    const index = this.data.indexOf(node);\n    if (!children || index < 0) {\n      // If no children, or cannot find the node, no op\n      return;\n    }\n\n    node.isLoading = true;\n\n    setTimeout(() => {\n      if (expand) {\n        const nodes = children.map(\n          name => new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)),\n        );\n        this.data.splice(index + 1, 0, ...nodes);\n      } else {\n        let count = 0;\n        for (\n          let i = index + 1;\n          i < this.data.length && this.data[i].level > node.level;\n          i++, count++\n        ) {}\n        this.data.splice(index + 1, count);\n      }\n\n      // notify the change\n      this.dataChange.next(this.data);\n      node.isLoading = false;\n    }, 1000);\n  }\n}\n\n/**\n * @title Tree with dynamic data\n */\n@Component({\n  selector: 'tree-dynamic-example',\n  templateUrl: 'tree-dynamic-example.html',\n  styleUrls: ['tree-dynamic-example.css'],\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, NgIf, MatProgressBarModule],\n})\nexport class TreeDynamicExample {\n  constructor(database: DynamicDatabase) {\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new DynamicDataSource(this.treeControl, database);\n\n    this.dataSource.data = database.initialData();\n  }\n\n  treeControl: FlatTreeControl<DynamicFlatNode>;\n\n  dataSource: DynamicDataSource;\n\n  getLevel = (node: DynamicFlatNode) => node.level;\n\n  isExpandable = (node: DynamicFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button\n            [attr.aria-label]=\"'Toggle ' + node.item\" matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n    <mat-progress-bar *ngIf=\"node.isLoading\"\n                      mode=\"indeterminate\"\n                      class=\"example-tree-progress-bar\"></mat-progress-bar>\n  </mat-tree-node>\n</mat-tree>\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n *\n * 具有嵌套结构的食物数据。每个节点都有一个名称和一个可选的子节点列表。\n *\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n\n/**\n * Flat node with expandable and level information\n *\n * 具有可扩展和级别信息的平面节点\n *\n */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'tree-flat-overview-example',\n  templateUrl: 'tree-flat-overview-example.html',\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n})\nexport class TreeFlatOverviewExample {\n  private _transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\ninterface Node {\n  name: string;\n  children?: Node[];\n}\n\nconst FLAT_TREE_DATA: Node[] = [\n  {\n    name: 'Flat Group 1',\n    children: [{name: 'Flat Leaf 1.1'}, {name: 'Flat Leaf 1.2'}, {name: 'Flat Leaf 1.3'}],\n  },\n  {\n    name: 'Flat Group 2',\n    children: [\n      {\n        name: 'Flat Group 2.1',\n        children: [{name: 'Flat Leaf 2.1.1'}, {name: 'Flat Leaf 2.1.2'}, {name: 'Flat Leaf 2.1.3'}],\n      },\n    ],\n  },\n];\n\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Testing with MatTreeHarness\n */\n@Component({\n  selector: 'tree-harness-example',\n  templateUrl: 'tree-harness-example.html',\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n})\nexport class TreeHarnessExample {\n  private _transformer = (node: Node, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = FLAT_TREE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\nconst LOAD_MORE = 'LOAD_MORE';\n\n/**\n * Nested node\n *\n * 嵌套节点\n *\n */\nexport class LoadmoreNode {\n  childrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\n\n  get children(): LoadmoreNode[] {\n    return this.childrenChange.value;\n  }\n\n  constructor(\n    public item: string,\n    public hasChildren = false,\n    public loadMoreParentItem: string | null = null,\n  ) {}\n}\n\n/**\n * Flat node with expandable and level information\n *\n * 具有可扩展和级别信息的平面节点\n *\n */\nexport class LoadmoreFlatNode {\n  constructor(\n    public item: string,\n    public level = 1,\n    public expandable = false,\n    public loadMoreParentItem: string | null = null,\n  ) {}\n}\n\n/**\n * A database that only load part of the data initially. After user clicks on the `Load more`\n * button, more data will be loaded.\n *\n * 最初只加载部分数据的数据库。用户点击 `Load more` 按钮后，将加载更多数据。\n *\n */\n@Injectable()\nexport class LoadmoreDatabase {\n  batchNumber = 5;\n  dataChange = new BehaviorSubject<LoadmoreNode[]>([]);\n  nodeMap = new Map<string, LoadmoreNode>();\n\n  /**\n   * The data\n   *\n   * 数据\n   *\n   */\n  rootLevelNodes: string[] = ['Vegetables', 'Fruits'];\n  dataMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n  ]);\n\n  initialize() {\n    const data = this.rootLevelNodes.map(name => this._generateNode(name));\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Expand a node whose children are not loaded\n   *\n   * 展开其子节点未加载的节点\n   *\n   */\n  loadMore(item: string, onlyFirstTime = false) {\n    if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\n      return;\n    }\n    const parent = this.nodeMap.get(item)!;\n    const children = this.dataMap.get(item)!;\n    if (onlyFirstTime && parent.children!.length > 0) {\n      return;\n    }\n    const newChildrenNumber = parent.children!.length + this.batchNumber;\n    const nodes = children.slice(0, newChildrenNumber).map(name => this._generateNode(name));\n    if (newChildrenNumber < children.length) {\n      // Need a new load more node\n      nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\n    }\n\n    parent.childrenChange.next(nodes);\n    this.dataChange.next(this.dataChange.value);\n  }\n\n  private _generateNode(item: string): LoadmoreNode {\n    if (this.nodeMap.has(item)) {\n      return this.nodeMap.get(item)!;\n    }\n    const result = new LoadmoreNode(item, this.dataMap.has(item));\n    this.nodeMap.set(item, result);\n    return result;\n  }\n}\n\n/**\n * @title Tree with partially loaded data\n */\n@Component({\n  selector: 'tree-loadmore-example',\n  templateUrl: 'tree-loadmore-example.html',\n  providers: [LoadmoreDatabase],\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n})\nexport class TreeLoadmoreExample {\n  nodeMap = new Map<string, LoadmoreFlatNode>();\n  treeControl: FlatTreeControl<LoadmoreFlatNode>;\n  treeFlattener: MatTreeFlattener<LoadmoreNode, LoadmoreFlatNode>;\n  // Flat tree data source\n  dataSource: MatTreeFlatDataSource<LoadmoreNode, LoadmoreFlatNode>;\n\n  constructor(private _database: LoadmoreDatabase) {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren,\n    );\n\n    this.treeControl = new FlatTreeControl<LoadmoreFlatNode>(this.getLevel, this.isExpandable);\n\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n\n    _database.initialize();\n  }\n\n  getChildren = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\n\n  transformer = (node: LoadmoreNode, level: number) => {\n    const existingNode = this.nodeMap.get(node.item);\n\n    if (existingNode) {\n      return existingNode;\n    }\n\n    const newNode = new LoadmoreFlatNode(\n      node.item,\n      level,\n      node.hasChildren,\n      node.loadMoreParentItem,\n    );\n    this.nodeMap.set(node.item, newNode);\n    return newNode;\n  };\n\n  getLevel = (node: LoadmoreFlatNode) => node.level;\n\n  isExpandable = (node: LoadmoreFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.expandable;\n\n  isLoadMore = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.item === LOAD_MORE;\n\n  /**\n   * Load more nodes from data source\n   *\n   * 从数据源加载更多节点\n   *\n   */\n  loadMore(item: string) {\n    this._database.loadMore(item);\n  }\n\n  loadChildren(node: LoadmoreFlatNode) {\n    this._database.loadMore(node.item, true);\n  }\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- Leaf node -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n\n  <!-- expandable node -->\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button\n            [attr.aria-label]=\"'Toggle ' + node.item\"\n            (click)=\"loadChildren(node)\"\n            matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: isLoadMore\">\n    <button mat-button (click)=\"loadMore(node.loadMoreParentItem)\">\n      Load more...\n    </button>\n  </mat-tree-node>\n</mat-tree>\n","import {NestedTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeNestedDataSource, MatTreeModule} from '@angular/material/tree';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n *\n * 具有嵌套结构的食物数据。每个节点都有一个名称和一个可选的子节点列表。\n *\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}],\n  },\n  {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\n      },\n      {\n        name: 'Orange',\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\n      },\n    ],\n  },\n];\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'tree-nested-overview-example',\n  templateUrl: 'tree-nested-overview-example.html',\n  styleUrls: ['tree-nested-overview-example.css'],\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule],\n})\nexport class TreeNestedOverviewExample {\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new MatTreeNestedDataSource<FoodNode>();\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"example-tree\">\n  <!-- This is the tree node template for leaf nodes -->\n  <!-- There is inline padding applied to this node using styles.\n    This padding value depends on the mat-icon-button width. -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle>\n      {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"mat-tree-node\">\n        <button mat-icon-button matTreeNodeToggle\n                [attr.aria-label]=\"'Toggle ' + node.name\">\n          <mat-icon class=\"mat-icon-rtl-mirror\">\n            {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n          </mat-icon>\n        </button>\n        {{node.name}}\n      </div>\n      <!-- There is inline padding applied to this div using styles.\n          This padding value depends on the mat-icon-button width.  -->\n      <div [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\"\n          role=\"group\">\n        <ng-container matTreeNodeOutlet></ng-container>\n    </div>\n  </mat-nested-tree-node>\n</mat-tree>\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["TREE_DATA","i6","i3","i4"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAWA;;;;;AAKG;MACU,YAAY,CAAA;AAGxB,CAAA;AAED;;;;;AAKG;MACU,gBAAgB,CAAA;AAI5B,CAAA;AAED;;;;;AAKG;AACH,MAAMA,WAAS,GAAG;AAChB,IAAA,SAAS,EAAE;AACT,QAAA,mBAAmB,EAAE,IAAI;AACzB,QAAA,cAAc,EAAE,IAAI;AACpB,QAAA,gBAAgB,EAAE,IAAI;AACtB,QAAA,MAAM,EAAE;AACN,YAAA,KAAK,EAAE,IAAI;AACX,YAAA,OAAO,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;AACnC,YAAA,MAAM,EAAE,IAAI;AACb,SAAA;AACF,KAAA;AACD,IAAA,SAAS,EAAE,CAAC,aAAa,EAAE,+BAA+B,EAAE,gCAAgC,CAAC;CAC9F,CAAC;AAEF;;;;;;;AAOG;MAEU,iBAAiB,CAAA;AAG5B,IAAA,IAAI,IAAI,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;KAC9B;AAED,IAAA,WAAA,GAAA;AANA,QAAA,IAAA,CAAA,UAAU,GAAG,IAAI,eAAe,CAAiB,EAAE,CAAC,CAAC;QAOnD,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;IAED,UAAU,GAAA;;;QAGR,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAACA,WAAS,EAAE,CAAC,CAAC,CAAC;;AAG9C,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC5B;AAED;;;;;;AAMG;IACH,aAAa,CAAC,GAAyB,EAAE,KAAa,EAAA;AACpD,QAAA,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAiB,CAAC,WAAW,EAAE,GAAG,KAAI;AAClE,YAAA,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AACvB,YAAA,MAAM,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;AAChC,YAAA,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAEhB,IAAI,KAAK,IAAI,IAAI,EAAE;AACjB,gBAAA,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC7B,oBAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;AACtD,iBAAA;AAAM,qBAAA;AACL,oBAAA,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AACnB,iBAAA;AACF,aAAA;AAED,YAAA,OAAO,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACjC,EAAE,EAAE,CAAC,CAAC;KACR;AAED;;;;;AAKG;IACH,UAAU,CAAC,MAAoB,EAAE,IAAY,EAAA;QAC3C,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,EAAiB,CAAC,CAAC;YACnD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjC,SAAA;KACF;IAED,UAAU,CAAC,IAAkB,EAAE,IAAY,EAAA;AACzC,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACjC;8GA7DU,iBAAiB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;kHAAjB,iBAAiB,EAAA,CAAA,CAAA,EAAA;;2FAAjB,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAD7B,UAAU;;AAiEX;;AAEG;MAgBU,oBAAoB,CAAA;AA+C/B,IAAA,WAAA,CAAoB,SAA4B,EAAA;QAA5B,IAAS,CAAA,SAAA,GAAT,SAAS,CAAmB;AA9ChD;;;;;AAKG;AACH,QAAA,IAAA,CAAA,WAAW,GAAG,IAAI,GAAG,EAAkC,CAAC;AAExD;;;;;AAKG;AACH,QAAA,IAAA,CAAA,aAAa,GAAG,IAAI,GAAG,EAAkC,CAAC;AAE1D;;;;;AAKG;QACH,IAAc,CAAA,cAAA,GAA4B,IAAI,CAAC;AAE/C;;;;;AAKG;QACH,IAAW,CAAA,WAAA,GAAG,EAAE,CAAC;AAQjB;;;;;AAKG;QACH,IAAkB,CAAA,kBAAA,GAAG,IAAI,cAAc,CAAmB,IAAI,gBAAgB,CAAC;QAiB/E,IAAQ,CAAA,QAAA,GAAG,CAAC,IAAsB,KAAK,IAAI,CAAC,KAAK,CAAC;QAElD,IAAY,CAAA,YAAA,GAAG,CAAC,IAAsB,KAAK,IAAI,CAAC,UAAU,CAAC;QAE3D,IAAW,CAAA,WAAA,GAAG,CAAC,IAAkB,KAAqB,IAAI,CAAC,QAAQ,CAAC;QAEpE,IAAQ,CAAA,QAAA,GAAG,CAAC,CAAS,EAAE,SAA2B,KAAK,SAAS,CAAC,UAAU,CAAC;AAE5E,QAAA,IAAA,CAAA,YAAY,GAAG,CAAC,CAAS,EAAE,SAA2B,KAAK,SAAS,CAAC,IAAI,KAAK,EAAE,CAAC;AAEjF;;;;;AAKG;AACH,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,IAAkB,EAAE,KAAa,KAAI;YAClD,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,QAAQ,GACZ,YAAY,IAAI,YAAY,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,YAAY,GAAG,IAAI,gBAAgB,EAAE,CAAC;AAC1F,YAAA,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC1B,YAAA,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;YAC9C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACrC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACvC,YAAA,OAAO,QAAQ,CAAC;AAClB,SAAC,CAAC;QAxCA,IAAI,CAAC,aAAa,GAAG,IAAI,gBAAgB,CACvC,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,WAAW,CACjB,CAAC;AACF,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,CAAmB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAC3F,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AAElF,QAAA,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,IAAG;AACpC,YAAA,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;AAC9B,SAAC,CAAC,CAAC;KACJ;AA8BD;;;;;AAKG;AACH,IAAA,sBAAsB,CAAC,IAAsB,EAAA;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC1D,QAAA,MAAM,eAAe,GACnB,WAAW,CAAC,MAAM,GAAG,CAAC;AACtB,YAAA,WAAW,CAAC,KAAK,CAAC,KAAK,IAAG;gBACxB,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACnD,aAAC,CAAC,CAAC;AACL,QAAA,OAAO,eAAe,CAAC;KACxB;AAED;;;;;AAKG;AACH,IAAA,4BAA4B,CAAC,IAAsB,EAAA;QACjD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC1D,QAAA,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACpF,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;KACrD;AAED;;;;;AAKG;AACH,IAAA,uBAAuB,CAAC,IAAsB,EAAA;AAC5C,QAAA,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC1D,QAAA,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC;cACpC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC;cAC9C,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,CAAC;;AAGrD,QAAA,WAAW,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AACxE,QAAA,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;KACrC;AAED;;;;;AAKG;AACH,IAAA,2BAA2B,CAAC,IAAsB,EAAA;AAChD,QAAA,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACrC,QAAA,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;KACrC;;AAGD,IAAA,wBAAwB,CAAC,IAAsB,EAAA;QAC7C,IAAI,MAAM,GAA4B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC/D,QAAA,OAAO,MAAM,EAAE;AACb,YAAA,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACpC,YAAA,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AACrC,SAAA;KACF;AAED;;;;;AAKG;AACH,IAAA,sBAAsB,CAAC,IAAsB,EAAA;QAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC1D,QAAA,MAAM,eAAe,GACnB,WAAW,CAAC,MAAM,GAAG,CAAC;AACtB,YAAA,WAAW,CAAC,KAAK,CAAC,KAAK,IAAG;gBACxB,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACnD,aAAC,CAAC,CAAC;AACL,QAAA,IAAI,YAAY,IAAI,CAAC,eAAe,EAAE;AACpC,YAAA,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACxC,SAAA;AAAM,aAAA,IAAI,CAAC,YAAY,IAAI,eAAe,EAAE;AAC3C,YAAA,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACtC,SAAA;KACF;;AAGD,IAAA,aAAa,CAAC,IAAsB,EAAA;QAClC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,YAAY,GAAG,CAAC,EAAE;AACpB,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AAED,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEhE,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAElD,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,YAAY,EAAE;AAC7C,gBAAA,OAAO,WAAW,CAAC;AACpB,aAAA;AACF,SAAA;AACD,QAAA,OAAO,IAAI,CAAC;KACb;AAED;;;;;AAKG;AACH,IAAA,UAAU,CAAC,IAAsB,EAAA;QAC/B,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAW,EAAE,EAAE,CAAC,CAAC;AAC3C,QAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC/B;AAED;;;;;AAKG;IACH,QAAQ,CAAC,IAAsB,EAAE,SAAiB,EAAA;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAW,EAAE,SAAS,CAAC,CAAC;KACnD;8GA1NU,oBAAoB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAApB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,oBAAoB,qEAXpB,CAAC,iBAAiB,CAAC,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECtIhC,u/CA8BA,ED2GI,MAAA,EAAA,CAAA,kDAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,aAAa,EACb,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,4BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,eAAe,waACf,iBAAiB,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,eAAA,EAAA,OAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACjB,kBAAkB,EAClB,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,YAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,WAAA,CAAA,EAAA,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,WAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,cAAc,0WACd,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;2FAGJ,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBAfhC,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,wBAAwB,aAGvB,CAAC,iBAAiB,CAAC,EAAA,UAAA,EAClB,IAAI,EACP,OAAA,EAAA;wBACP,aAAa;wBACb,eAAe;wBACf,iBAAiB;wBACjB,kBAAkB;wBAClB,cAAc;wBACd,aAAa;AACd,qBAAA,EAAA,QAAA,EAAA,u/CAAA,EAAA,MAAA,EAAA,CAAA,kDAAA,CAAA,EAAA,CAAA;;;AEpIH;;;;;AAKG;MACU,eAAe,CAAA;IAC1B,WACS,CAAA,IAAY,EACZ,KAAQ,GAAA,CAAC,EACT,UAAa,GAAA,KAAK,EAClB,SAAA,GAAY,KAAK,EAAA;QAHjB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;QACZ,IAAK,CAAA,KAAA,GAAL,KAAK,CAAI;QACT,IAAU,CAAA,UAAA,GAAV,UAAU,CAAQ;QAClB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAQ;KACtB;AACL,CAAA;AAED;;;;;;AAMG;MAEU,eAAe,CAAA;AAD5B,IAAA,WAAA,GAAA;QAEE,IAAO,CAAA,OAAA,GAAG,IAAI,GAAG,CAAmB;YAClC,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACzC,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AAC7C,YAAA,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAChC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;AACzC,SAAA,CAAC,CAAC;AAEH,QAAA,IAAA,CAAA,cAAc,GAAa,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;AAmBrD,KAAA;AAjBC;;;;;AAKG;IACH,WAAW,GAAA;QACT,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,eAAe,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;KAC5E;AAED,IAAA,WAAW,CAAC,IAAY,EAAA;QACtB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAC/B;AAED,IAAA,YAAY,CAAC,IAAY,EAAA;QACvB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAC/B;8GA1BU,eAAe,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;AAAf,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAe,cADH,MAAM,EAAA,CAAA,CAAA,EAAA;;2FAClB,eAAe,EAAA,UAAA,EAAA,CAAA;kBAD3B,UAAU;mBAAC,EAAC,UAAU,EAAE,MAAM,EAAC,CAAA;;AA6BhC;;;;;;;;;AASG;MACU,iBAAiB,CAAA;AAG5B,IAAA,IAAI,IAAI,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;KAC9B;IACD,IAAI,IAAI,CAAC,KAAwB,EAAA;AAC/B,QAAA,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC;AACpC,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC7B;IAED,WACU,CAAA,YAA8C,EAC9C,SAA0B,EAAA;QAD1B,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAkC;QAC9C,IAAS,CAAA,SAAA,GAAT,SAAS,CAAiB;AAZpC,QAAA,IAAA,CAAA,UAAU,GAAG,IAAI,eAAe,CAAoB,EAAE,CAAC,CAAC;KAapD;AAEJ,IAAA,OAAO,CAAC,gBAAkC,EAAA;QACxC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,IAAG;YAC1D,IACG,MAA2C,CAAC,KAAK;gBACjD,MAA2C,CAAC,OAAO,EACpD;AACA,gBAAA,IAAI,CAAC,iBAAiB,CAAC,MAA0C,CAAC,CAAC;AACpE,aAAA;AACH,SAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACvF;IAED,UAAU,CAAC,gBAAkC,EAAA,GAAU;AAEvD;;;;;AAKG;AACH,IAAA,iBAAiB,CAAC,MAAwC,EAAA;QACxD,IAAI,MAAM,CAAC,KAAK,EAAE;AAChB,YAAA,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC3D,SAAA;QACD,IAAI,MAAM,CAAC,OAAO,EAAE;AAClB,YAAA,MAAM,CAAC,OAAO;AACX,iBAAA,KAAK,EAAE;AACP,iBAAA,OAAO,EAAE;AACT,iBAAA,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;AAClD,SAAA;KACF;AAED;;;;;AAKG;IACH,UAAU,CAAC,IAAqB,EAAE,MAAe,EAAA;AAC/C,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACtC,QAAA,IAAI,CAAC,QAAQ,IAAI,KAAK,GAAG,CAAC,EAAE;;YAE1B,OAAO;AACR,SAAA;AAED,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,UAAU,CAAC,MAAK;AACd,YAAA,IAAI,MAAM,EAAE;AACV,gBAAA,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CACxB,IAAI,IAAI,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CACrF,CAAC;AACF,gBAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;AAC1C,aAAA;AAAM,iBAAA;gBACL,IAAI,KAAK,GAAG,CAAC,CAAC;AACd,gBAAA,KACE,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,EACjB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EACvD,CAAC,EAAE,EAAE,KAAK,EAAE,EACZ,GAAE;gBACJ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;AACpC,aAAA;;YAGD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,YAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SACxB,EAAE,IAAI,CAAC,CAAC;KACV;AACF,CAAA;AAED;;AAEG;MAQU,kBAAkB,CAAA;AAC7B,IAAA,WAAA,CAAY,QAAyB,EAAA;QAWrC,IAAQ,CAAA,QAAA,GAAG,CAAC,IAAqB,KAAK,IAAI,CAAC,KAAK,CAAC;QAEjD,IAAY,CAAA,YAAA,GAAG,CAAC,IAAqB,KAAK,IAAI,CAAC,UAAU,CAAC;QAE1D,IAAQ,CAAA,QAAA,GAAG,CAAC,CAAS,EAAE,SAA0B,KAAK,SAAS,CAAC,UAAU,CAAC;AAdzE,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,CAAkB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAC1F,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAEpE,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;KAC/C;8GANU,kBAAkB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,eAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAAlB,kBAAkB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EC1K/B,6xBAkBA,EAAA,MAAA,EAAA,CAAA,yDAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EDsJY,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,4BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAE,eAAe,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,yBAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,eAAA,EAAA,OAAA,CAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAE,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,IAAI,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAE,oBAAoB,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,IAAA,CAAA,cAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,OAAA,EAAA,aAAA,EAAA,MAAA,CAAA,EAAA,OAAA,EAAA,CAAA,cAAA,CAAA,EAAA,QAAA,EAAA,CAAA,gBAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;2FAExE,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBAP9B,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,sBAAsB,EAGpB,UAAA,EAAA,IAAI,EACP,OAAA,EAAA,CAAC,aAAa,EAAE,eAAe,EAAE,aAAa,EAAE,IAAI,EAAE,oBAAoB,CAAC,EAAA,QAAA,EAAA,6xBAAA,EAAA,MAAA,EAAA,CAAA,yDAAA,CAAA,EAAA,CAAA;;;AEtJtF,MAAMH,WAAS,GAAe;AAC5B,IAAA;AACE,QAAA,IAAI,EAAE,OAAO;AACb,QAAA,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAE,EAAC,IAAI,EAAE,aAAa,EAAC,CAAC;AACrE,KAAA;AACD,IAAA;AACE,QAAA,IAAI,EAAE,YAAY;AAClB,QAAA,QAAQ,EAAE;AACR,YAAA;AACE,gBAAA,IAAI,EAAE,OAAO;AACb,gBAAA,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,UAAU,EAAC,EAAE,EAAC,IAAI,EAAE,kBAAkB,EAAC,CAAC;AAC3D,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,QAAQ;AACd,gBAAA,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,UAAU,EAAC,EAAE,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC;AAClD,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAcF;;AAEG;MAOU,uBAAuB,CAAA;AAuBlC,IAAA,WAAA,GAAA;AAtBQ,QAAA,IAAA,CAAA,YAAY,GAAG,CAAC,IAAc,EAAE,KAAa,KAAI;YACvD,OAAO;AACL,gBAAA,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;gBACvD,IAAI,EAAE,IAAI,CAAC,IAAI;AACf,gBAAA,KAAK,EAAE,KAAK;aACb,CAAC;AACJ,SAAC,CAAC;QAEF,IAAW,CAAA,WAAA,GAAG,IAAI,eAAe,CAC/B,IAAI,IAAI,IAAI,CAAC,KAAK,EAClB,IAAI,IAAI,IAAI,CAAC,UAAU,CACxB,CAAC;AAEF,QAAA,IAAA,CAAA,aAAa,GAAG,IAAI,gBAAgB,CAClC,IAAI,CAAC,YAAY,EACjB,IAAI,IAAI,IAAI,CAAC,KAAK,EAClB,IAAI,IAAI,IAAI,CAAC,UAAU,EACvB,IAAI,IAAI,IAAI,CAAC,QAAQ,CACtB,CAAC;AAEF,QAAA,IAAA,CAAA,UAAU,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAM7E,IAAQ,CAAA,QAAA,GAAG,CAAC,CAAS,EAAE,IAAqB,KAAK,IAAI,CAAC,UAAU,CAAC;AAH/D,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,GAAGA,WAAS,CAAC;KAClC;8GAzBU,uBAAuB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAAvB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,uBAAuB,sFC3DpC,8yBAkBA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EDuCY,aAAa,EAAE,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,4BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,eAAe,2LAAE,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAE,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;2FAE5C,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBANnC,SAAS;+BACE,4BAA4B,EAAA,UAAA,EAE1B,IAAI,EACP,OAAA,EAAA,CAAC,aAAa,EAAE,eAAe,EAAE,aAAa,CAAC,EAAA,QAAA,EAAA,8yBAAA,EAAA,CAAA;;;AE9C1D,MAAM,cAAc,GAAW;AAC7B,IAAA;AACE,QAAA,IAAI,EAAE,cAAc;AACpB,QAAA,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,eAAe,EAAC,EAAE,EAAC,IAAI,EAAE,eAAe,EAAC,EAAE,EAAC,IAAI,EAAE,eAAe,EAAC,CAAC;AACtF,KAAA;AACD,IAAA;AACE,QAAA,IAAI,EAAE,cAAc;AACpB,QAAA,QAAQ,EAAE;AACR,YAAA;AACE,gBAAA,IAAI,EAAE,gBAAgB;AACtB,gBAAA,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,iBAAiB,EAAC,EAAE,EAAC,IAAI,EAAE,iBAAiB,EAAC,EAAE,EAAC,IAAI,EAAE,iBAAiB,EAAC,CAAC;AAC5F,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAQF;;AAEG;MAOU,kBAAkB,CAAA;AAuB7B,IAAA,WAAA,GAAA;AAtBQ,QAAA,IAAA,CAAA,YAAY,GAAG,CAAC,IAAU,EAAE,KAAa,KAAI;YACnD,OAAO;AACL,gBAAA,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;gBACvD,IAAI,EAAE,IAAI,CAAC,IAAI;AACf,gBAAA,KAAK,EAAE,KAAK;aACb,CAAC;AACJ,SAAC,CAAC;QAEF,IAAW,CAAA,WAAA,GAAG,IAAI,eAAe,CAC/B,IAAI,IAAI,IAAI,CAAC,KAAK,EAClB,IAAI,IAAI,IAAI,CAAC,UAAU,CACxB,CAAC;AAEF,QAAA,IAAA,CAAA,aAAa,GAAG,IAAI,gBAAgB,CAClC,IAAI,CAAC,YAAY,EACjB,IAAI,IAAI,IAAI,CAAC,KAAK,EAClB,IAAI,IAAI,IAAI,CAAC,UAAU,EACvB,IAAI,IAAI,IAAI,CAAC,QAAQ,CACtB,CAAC;AAEF,QAAA,IAAA,CAAA,UAAU,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAM7E,IAAQ,CAAA,QAAA,GAAG,CAAC,CAAS,EAAE,IAAqB,KAAK,IAAI,CAAC,UAAU,CAAC;AAH/D,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,cAAc,CAAC;KACvC;8GAzBU,kBAAkB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAAlB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,kBAAkB,gFC1C/B,8yBAkBA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EDsBY,aAAa,EAAE,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,4BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,eAAe,2LAAE,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;2FAE5C,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBAN9B,SAAS;+BACE,sBAAsB,EAAA,UAAA,EAEpB,IAAI,EACP,OAAA,EAAA,CAAC,aAAa,EAAE,eAAe,EAAE,aAAa,CAAC,EAAA,QAAA,EAAA,8yBAAA,EAAA,CAAA;;;AE1B1D,MAAM,SAAS,GAAG,WAAW,CAAC;AAE9B;;;;;AAKG;MACU,YAAY,CAAA;AAGvB,IAAA,IAAI,QAAQ,GAAA;AACV,QAAA,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;KAClC;AAED,IAAA,WAAA,CACS,IAAY,EACZ,WAAA,GAAc,KAAK,EACnB,qBAAoC,IAAI,EAAA;QAFxC,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;QACZ,IAAW,CAAA,WAAA,GAAX,WAAW,CAAQ;QACnB,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAsB;AATjD,QAAA,IAAA,CAAA,cAAc,GAAG,IAAI,eAAe,CAAiB,EAAE,CAAC,CAAC;KAUrD;AACL,CAAA;AAED;;;;;AAKG;MACU,gBAAgB,CAAA;IAC3B,WACS,CAAA,IAAY,EACZ,KAAQ,GAAA,CAAC,EACT,UAAa,GAAA,KAAK,EAClB,kBAAA,GAAoC,IAAI,EAAA;QAHxC,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;QACZ,IAAK,CAAA,KAAA,GAAL,KAAK,CAAI;QACT,IAAU,CAAA,UAAA,GAAV,UAAU,CAAQ;QAClB,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAsB;KAC7C;AACL,CAAA;AAED;;;;;;AAMG;MAEU,gBAAgB,CAAA;AAD7B,IAAA,WAAA,GAAA;QAEE,IAAW,CAAA,WAAA,GAAG,CAAC,CAAC;AAChB,QAAA,IAAA,CAAA,UAAU,GAAG,IAAI,eAAe,CAAiB,EAAE,CAAC,CAAC;AACrD,QAAA,IAAA,CAAA,OAAO,GAAG,IAAI,GAAG,EAAwB,CAAC;AAE1C;;;;;AAKG;AACH,QAAA,IAAA,CAAA,cAAc,GAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACpD,IAAO,CAAA,OAAA,GAAG,IAAI,GAAG,CAAmB;YAClC,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACzC,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AAC7C,YAAA,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAChC,YAAA,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AACrF,SAAA,CAAC,CAAC;AAyCJ,KAAA;IAvCC,UAAU,GAAA;AACR,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AACvE,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC5B;AAED;;;;;AAKG;AACH,IAAA,QAAQ,CAAC,IAAY,EAAE,aAAa,GAAG,KAAK,EAAA;AAC1C,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACtD,OAAO;AACR,SAAA;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QACzC,IAAI,aAAa,IAAI,MAAM,CAAC,QAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAChD,OAAO;AACR,SAAA;QACD,MAAM,iBAAiB,GAAG,MAAM,CAAC,QAAS,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;QACrE,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AACzF,QAAA,IAAI,iBAAiB,GAAG,QAAQ,CAAC,MAAM,EAAE;;AAEvC,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AACtD,SAAA;AAED,QAAA,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;KAC7C;AAEO,IAAA,aAAa,CAAC,IAAY,EAAA;QAChC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;AAChC,SAAA;AACD,QAAA,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC/B,QAAA,OAAO,MAAM,CAAC;KACf;8GAzDU,gBAAgB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;kHAAhB,gBAAgB,EAAA,CAAA,CAAA,EAAA;;2FAAhB,gBAAgB,EAAA,UAAA,EAAA,CAAA;kBAD5B,UAAU;;AA6DX;;AAEG;MAQU,mBAAmB,CAAA;AAO9B,IAAA,WAAA,CAAoB,SAA2B,EAAA;QAA3B,IAAS,CAAA,SAAA,GAAT,SAAS,CAAkB;AAN/C,QAAA,IAAA,CAAA,OAAO,GAAG,IAAI,GAAG,EAA4B,CAAC;QAyB9C,IAAW,CAAA,WAAA,GAAG,CAAC,IAAkB,KAAiC,IAAI,CAAC,cAAc,CAAC;AAEtF,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,IAAkB,EAAE,KAAa,KAAI;AAClD,YAAA,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAEjD,YAAA,IAAI,YAAY,EAAE;AAChB,gBAAA,OAAO,YAAY,CAAC;AACrB,aAAA;AAED,YAAA,MAAM,OAAO,GAAG,IAAI,gBAAgB,CAClC,IAAI,CAAC,IAAI,EACT,KAAK,EACL,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,kBAAkB,CACxB,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACrC,YAAA,OAAO,OAAO,CAAC;AACjB,SAAC,CAAC;QAEF,IAAQ,CAAA,QAAA,GAAG,CAAC,IAAsB,KAAK,IAAI,CAAC,KAAK,CAAC;QAElD,IAAY,CAAA,YAAA,GAAG,CAAC,IAAsB,KAAK,IAAI,CAAC,UAAU,CAAC;QAE3D,IAAQ,CAAA,QAAA,GAAG,CAAC,CAAS,EAAE,SAA2B,KAAK,SAAS,CAAC,UAAU,CAAC;AAE5E,QAAA,IAAA,CAAA,UAAU,GAAG,CAAC,CAAS,EAAE,SAA2B,KAAK,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC;QA3CpF,IAAI,CAAC,aAAa,GAAG,IAAI,gBAAgB,CACvC,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,WAAW,CACjB,CAAC;AAEF,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,CAAmB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAE3F,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AAElF,QAAA,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,IAAG;AACpC,YAAA,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;AAC9B,SAAC,CAAC,CAAC;QAEH,SAAS,CAAC,UAAU,EAAE,CAAC;KACxB;AA6BD;;;;;AAKG;AACH,IAAA,QAAQ,CAAC,IAAY,EAAA;AACnB,QAAA,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC/B;AAED,IAAA,YAAY,CAAC,IAAsB,EAAA;QACjC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC1C;8GAjEU,mBAAmB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAAnB,mBAAmB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,uBAAA,EAAA,SAAA,EAJnB,CAAC,gBAAgB,CAAC,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EC7H/B,+5BA0BA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EDqGY,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,0BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,4BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAE,eAAe,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,SAAA,EAAA,QAAA,EAAA,6GAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,eAAA,EAAA,OAAA,CAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,yBAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,eAAA,EAAA,OAAA,CAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAE,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;2FAE5C,mBAAmB,EAAA,UAAA,EAAA,CAAA;kBAP/B,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,uBAAuB,EAEtB,SAAA,EAAA,CAAC,gBAAgB,CAAC,EACjB,UAAA,EAAA,IAAI,EACP,OAAA,EAAA,CAAC,aAAa,EAAE,eAAe,EAAE,aAAa,CAAC,EAAA,QAAA,EAAA,+5BAAA,EAAA,CAAA;;;AE7G1D,MAAM,SAAS,GAAe;AAC5B,IAAA;AACE,QAAA,IAAI,EAAE,OAAO;AACb,QAAA,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAE,EAAC,IAAI,EAAE,aAAa,EAAC,CAAC;AACrE,KAAA;AACD,IAAA;AACE,QAAA,IAAI,EAAE,YAAY;AAClB,QAAA,QAAQ,EAAE;AACR,YAAA;AACE,gBAAA,IAAI,EAAE,OAAO;AACb,gBAAA,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,UAAU,EAAC,EAAE,EAAC,IAAI,EAAE,kBAAkB,EAAC,CAAC;AAC3D,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,QAAQ;AACd,gBAAA,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,UAAU,EAAC,EAAE,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC;AAClD,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEF;;AAEG;MAQU,yBAAyB,CAAA;AAIpC,IAAA,WAAA,GAAA;AAHA,QAAA,IAAA,CAAA,WAAW,GAAG,IAAI,iBAAiB,CAAW,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrE,QAAA,IAAA,CAAA,UAAU,GAAG,IAAI,uBAAuB,EAAY,CAAC;QAMrD,IAAQ,CAAA,QAAA,GAAG,CAAC,CAAS,EAAE,IAAc,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;AAHpF,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,SAAS,CAAC;KAClC;8GANU,yBAAyB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAAzB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,yBAAyB,wFChDtC,6tCA0BA,EAAA,MAAA,EAAA,CAAA,2gBAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EDoBY,aAAa,EAAE,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,EAAA,mBAAA,CAAA,EAAA,QAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,4BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,eAAe,2LAAE,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;2FAE5C,yBAAyB,EAAA,UAAA,EAAA,CAAA;kBAPrC,SAAS;+BACE,8BAA8B,EAAA,UAAA,EAG5B,IAAI,EACP,OAAA,EAAA,CAAC,aAAa,EAAE,eAAe,EAAE,aAAa,CAAC,EAAA,QAAA,EAAA,6tCAAA,EAAA,MAAA,EAAA,CAAA,2gBAAA,CAAA,EAAA,CAAA;;;AE9C1D;;AAEG;;;;"}