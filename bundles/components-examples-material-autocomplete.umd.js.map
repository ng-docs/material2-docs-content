{"version":3,"file":"components-examples-material-autocomplete.umd.js","sources":["../../../../../src/components-examples/material/autocomplete/autocomplete-auto-active-first-option/autocomplete-auto-active-first-option-example.html","../../../../../src/components-examples/material/autocomplete/autocomplete-auto-active-first-option/autocomplete-auto-active-first-option-example.ts","../../../../../src/components-examples/material/autocomplete/autocomplete-display/autocomplete-display-example.html","../../../../../src/components-examples/material/autocomplete/autocomplete-display/autocomplete-display-example.ts","../../../../../src/components-examples/material/autocomplete/autocomplete-filter/autocomplete-filter-example.html","../../../../../src/components-examples/material/autocomplete/autocomplete-filter/autocomplete-filter-example.ts","../../../../../src/components-examples/material/autocomplete/autocomplete-optgroup/autocomplete-optgroup-example.html","../../../../../src/components-examples/material/autocomplete/autocomplete-optgroup/autocomplete-optgroup-example.ts","../../../../../src/components-examples/material/autocomplete/autocomplete-overview/autocomplete-overview-example.html","../../../../../src/components-examples/material/autocomplete/autocomplete-overview/autocomplete-overview-example.ts","../../../../../src/components-examples/material/autocomplete/autocomplete-plain-input/autocomplete-plain-input-example.html","../../../../../src/components-examples/material/autocomplete/autocomplete-plain-input/autocomplete-plain-input-example.ts","../../../../../src/components-examples/material/autocomplete/autocomplete-simple/autocomplete-simple-example.html","../../../../../src/components-examples/material/autocomplete/autocomplete-simple/autocomplete-simple-example.ts","../../../../../src/components-examples/material/autocomplete/autocomplete-harness/autocomplete-harness-example.html","../../../../../src/components-examples/material/autocomplete/autocomplete-harness/autocomplete-harness-example.ts","../../../../../src/components-examples/material/autocomplete/index.ts","../../../../../src/components-examples/material/autocomplete/autocomplete_public_index.ts"],"sourcesContent":["<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\">\n    <mat-label>Number</mat-label>\n    <input type=\"text\"\n           placeholder=\"Pick one\"\n           aria-label=\"Number\"\n           matInput\n           [formControl]=\"myControl\"\n           [matAutocomplete]=\"auto\">\n    <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        {{option}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n/**\n * @title Highlight the first autocomplete option\n */\n@Component({\n  selector: 'autocomplete-auto-active-first-option-example',\n  templateUrl: 'autocomplete-auto-active-first-option-example.html',\n  styleUrls: ['autocomplete-auto-active-first-option-example.css'],\n})\nexport class AutocompleteAutoActiveFirstOptionExample implements OnInit {\n  myControl = new FormControl();\n  options: string[] = ['One', 'Two', 'Three'];\n  filteredOptions: Observable<string[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value))\n    );\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options.filter(option => option.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\">\n    <mat-label>Assignee</mat-label>\n    <input type=\"text\" matInput [formControl]=\"myControl\" [matAutocomplete]=\"auto\">\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        {{option.name}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nexport interface User {\n  name: string;\n}\n\n/**\n * @title Display value autocomplete\n */\n@Component({\n  selector: 'autocomplete-display-example',\n  templateUrl: 'autocomplete-display-example.html',\n  styleUrls: ['autocomplete-display-example.css'],\n})\nexport class AutocompleteDisplayExample implements OnInit {\n  myControl = new FormControl();\n  options: User[] = [\n    {name: 'Mary'},\n    {name: 'Shelley'},\n    {name: 'Igor'}\n  ];\n  filteredOptions: Observable<User[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges\n      .pipe(\n        startWith(''),\n        map(value => typeof value === 'string' ? value : value.name),\n        map(name => name ? this._filter(name) : this.options.slice())\n      );\n  }\n\n  displayFn(user: User): string {\n    return user && user.name ? user.name : '';\n  }\n\n  private _filter(name: string): User[] {\n    const filterValue = name.toLowerCase();\n\n    return this.options.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\">\n    <mat-label>Number</mat-label>\n    <input type=\"text\"\n           placeholder=\"Pick one\"\n           aria-label=\"Number\"\n           matInput\n           [formControl]=\"myControl\"\n           [matAutocomplete]=\"auto\">\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        {{option}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n/**\n * @title Filter autocomplete\n */\n@Component({\n  selector: 'autocomplete-filter-example',\n  templateUrl: 'autocomplete-filter-example.html',\n  styleUrls: ['autocomplete-filter-example.css'],\n})\nexport class AutocompleteFilterExample implements OnInit {\n  myControl = new FormControl();\n  options: string[] = ['One', 'Two', 'Three'];\n  filteredOptions: Observable<string[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges\n      .pipe(\n        startWith(''),\n        map(value => this._filter(value))\n      );\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n}\n","<form [formGroup]=\"stateForm\">\n  <mat-form-field>\n    <mat-label>States Group</mat-label>\n    <input type=\"text\"\n           matInput\n           formControlName=\"stateGroup\"\n           required\n           [matAutocomplete]=\"autoGroup\">\n<!-- #docregion mat-autocomplete -->\n      <mat-autocomplete #autoGroup=\"matAutocomplete\">\n        <mat-optgroup *ngFor=\"let group of stateGroupOptions | async\" [label]=\"group.letter\">\n          <mat-option *ngFor=\"let name of group.names\" [value]=\"name\">\n            {{name}}\n          </mat-option>\n      </mat-optgroup>\n    </mat-autocomplete>\n<!-- #enddocregion mat-autocomplete -->\n  </mat-form-field>\n</form>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {startWith, map} from 'rxjs/operators';\n\nexport interface StateGroup {\n  letter: string;\n  names: string[];\n}\n\nexport const _filter = (opt: string[], value: string): string[] => {\n  const filterValue = value.toLowerCase();\n\n  return opt.filter(item => item.toLowerCase().indexOf(filterValue) === 0);\n};\n\n/**\n * @title Option groups autocomplete\n */\n@Component({\n  selector: 'autocomplete-optgroup-example',\n  templateUrl: './autocomplete-optgroup-example.html',\n})\n\nexport class AutocompleteOptgroupExample implements OnInit {\n  stateForm: FormGroup = this._formBuilder.group({\n    stateGroup: '',\n  });\n\n  stateGroups: StateGroup[] = [{\n    letter: 'A',\n    names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\n  }, {\n    letter: 'C',\n    names: ['California', 'Colorado', 'Connecticut']\n  }, {\n    letter: 'D',\n    names: ['Delaware']\n  }, {\n    letter: 'F',\n    names: ['Florida']\n  }, {\n    letter: 'G',\n    names: ['Georgia']\n  }, {\n    letter: 'H',\n    names: ['Hawaii']\n  }, {\n    letter: 'I',\n    names: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\n  }, {\n    letter: 'K',\n    names: ['Kansas', 'Kentucky']\n  }, {\n    letter: 'L',\n    names: ['Louisiana']\n  }, {\n    letter: 'M',\n    names: ['Maine', 'Maryland', 'Massachusetts', 'Michigan',\n      'Minnesota', 'Mississippi', 'Missouri', 'Montana']\n  }, {\n    letter: 'N',\n    names: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',\n      'New Mexico', 'New York', 'North Carolina', 'North Dakota']\n  }, {\n    letter: 'O',\n    names: ['Ohio', 'Oklahoma', 'Oregon']\n  }, {\n    letter: 'P',\n    names: ['Pennsylvania']\n  }, {\n    letter: 'R',\n    names: ['Rhode Island']\n  }, {\n    letter: 'S',\n    names: ['South Carolina', 'South Dakota']\n  }, {\n    letter: 'T',\n    names: ['Tennessee', 'Texas']\n  }, {\n    letter: 'U',\n    names: ['Utah']\n  }, {\n    letter: 'V',\n    names: ['Vermont', 'Virginia']\n  }, {\n    letter: 'W',\n    names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n  }];\n\n  stateGroupOptions: Observable<StateGroup[]>;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.stateGroupOptions = this.stateForm.get('stateGroup')!.valueChanges\n      .pipe(\n        startWith(''),\n        map(value => this._filterGroup(value))\n      );\n  }\n\n  private _filterGroup(value: string): StateGroup[] {\n    if (value) {\n      return this.stateGroups\n        .map(group => ({letter: group.letter, names: _filter(group.names, value)}))\n        .filter(group => group.names.length > 0);\n    }\n\n    return this.stateGroups;\n  }\n}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\">\n    <mat-label>State</mat-label>\n    <input matInput\n           aria-label=\"State\"\n           [matAutocomplete]=\"auto\"\n           [formControl]=\"stateCtrl\">\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let state of filteredStates | async\" [value]=\"state.name\">\n        <img class=\"example-option-img\" aria-hidden [src]=\"state.flag\" height=\"25\">\n        <span>{{state.name}}</span> |\n        <small>Population: {{state.population}}</small>\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n\n  <br>\n\n  <mat-slide-toggle\n    [checked]=\"stateCtrl.disabled\"\n    (change)=\"stateCtrl.disabled ? stateCtrl.enable() : stateCtrl.disable()\">\n    Disable Input?\n  </mat-slide-toggle>\n</form>\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nexport interface State {\n  flag: string;\n  name: string;\n  population: string;\n}\n\n/**\n * @title Autocomplete overview\n */\n@Component({\n  selector: 'autocomplete-overview-example',\n  templateUrl: 'autocomplete-overview-example.html',\n  styleUrls: ['autocomplete-overview-example.css'],\n})\nexport class AutocompleteOverviewExample {\n  stateCtrl = new FormControl();\n  filteredStates: Observable<State[]>;\n\n  states: State[] = [\n    {\n      name: 'Arkansas',\n      population: '2.978M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Arkansas.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg'\n    },\n    {\n      name: 'California',\n      population: '39.14M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_California.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg'\n    },\n    {\n      name: 'Florida',\n      population: '20.27M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Florida.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg'\n    },\n    {\n      name: 'Texas',\n      population: '27.47M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Texas.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg'\n    }\n  ];\n\n  constructor() {\n    this.filteredStates = this.stateCtrl.valueChanges\n      .pipe(\n        startWith(''),\n        map(state => state ? this._filterStates(state) : this.states.slice())\n      );\n  }\n\n  private _filterStates(value: string): State[] {\n    const filterValue = value.toLowerCase();\n\n    return this.states.filter(state => state.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","<form class=\"example-form\">\n  <input type=\"text\"\n         placeholder=\"Search for a street\"\n         [formControl]=\"control\"\n         [matAutocomplete]=\"auto\">\n  <mat-autocomplete #auto=\"matAutocomplete\">\n    <mat-option *ngFor=\"let street of filteredStreets | async\" [value]=\"street\">\n      {{street}}\n    </mat-option>\n  </mat-autocomplete>\n</form>\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {startWith, map} from 'rxjs/operators';\n\n/**\n * @title Plain input autocomplete\n */\n@Component({\n  selector: 'autocomplete-plain-input-example',\n  templateUrl: 'autocomplete-plain-input-example.html',\n  styleUrls: ['autocomplete-plain-input-example.css'],\n})\nexport class AutocompletePlainInputExample implements OnInit {\n  control = new FormControl();\n  streets: string[] = ['Champs-Élysées', 'Lombard Street', 'Abbey Road', 'Fifth Avenue'];\n  filteredStreets: Observable<string[]>;\n\n  ngOnInit() {\n    this.filteredStreets = this.control.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value))\n    );\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = this._normalizeValue(value);\n    return this.streets.filter(street => this._normalizeValue(street).includes(filterValue));\n  }\n\n  private _normalizeValue(value: string): string {\n    return value.toLowerCase().replace(/\\s/g, '');\n  }\n}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\">\n    <mat-label>Number</mat-label>\n<!-- #docregion input -->\n    <input type=\"text\"\n           placeholder=\"Pick one\"\n           aria-label=\"Number\"\n           matInput\n           [formControl]=\"myControl\"\n           [matAutocomplete]=\"auto\">\n<!-- #enddocregion input -->\n<!-- #docregion mat-autocomplete -->\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option of options\" [value]=\"option\">\n        {{option}}\n      </mat-option>\n    </mat-autocomplete>\n<!-- #enddocregion mat-autocomplete -->\n  </mat-form-field>\n</form>\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\n/**\n * @title Simple autocomplete\n */\n@Component({\n  selector: 'autocomplete-simple-example',\n  templateUrl: 'autocomplete-simple-example.html',\n  styleUrls: ['autocomplete-simple-example.css'],\n})\nexport class AutocompleteSimpleExample {\n  myControl = new FormControl();\n  options: string[] = ['One', 'Two', 'Three'];\n}\n","<mat-autocomplete #autocomplete=\"matAutocomplete\">\n  <mat-option *ngFor=\"let state of states\" [value]=\"state.code\">{{ state.name }}</mat-option>\n</mat-autocomplete>\n\n<input id=\"plain\" [matAutocomplete]=\"autocomplete\">\n<input id=\"disabled\" disabled [matAutocomplete]=\"autocomplete\">\n","import {Component} from '@angular/core';\n\n/**\n * @title Testing with MatAutocompleteHarness\n */\n@Component({\n  selector: 'autocomplete-harness-example',\n  templateUrl: 'autocomplete-harness-example.html'\n})\nexport class AutocompleteHarnessExample {\n  states = [\n    {code: 'AL', name: 'Alabama'},\n    {code: 'CA', name: 'California'},\n    {code: 'FL', name: 'Florida'},\n    {code: 'KS', name: 'Kansas'},\n    {code: 'MA', name: 'Massachusetts'},\n    {code: 'NY', name: 'New York'},\n    {code: 'OR', name: 'Oregon'},\n    {code: 'PA', name: 'Pennsylvania'},\n    {code: 'TN', name: 'Tennessee'},\n    {code: 'VA', name: 'Virginia'},\n    {code: 'WY', name: 'Wyoming'},\n  ];\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {\n  AutocompleteAutoActiveFirstOptionExample\n} from './autocomplete-auto-active-first-option/autocomplete-auto-active-first-option-example';\nimport {AutocompleteDisplayExample} from './autocomplete-display/autocomplete-display-example';\nimport {AutocompleteFilterExample} from './autocomplete-filter/autocomplete-filter-example';\nimport {AutocompleteOptgroupExample} from './autocomplete-optgroup/autocomplete-optgroup-example';\nimport {AutocompleteOverviewExample} from './autocomplete-overview/autocomplete-overview-example';\nimport {\n  AutocompletePlainInputExample\n} from './autocomplete-plain-input/autocomplete-plain-input-example';\nimport {AutocompleteSimpleExample} from './autocomplete-simple/autocomplete-simple-example';\nimport {AutocompleteHarnessExample} from './autocomplete-harness/autocomplete-harness-example';\n\nexport {\n  AutocompleteAutoActiveFirstOptionExample,\n  AutocompleteDisplayExample,\n  AutocompleteFilterExample,\n  AutocompleteHarnessExample,\n  AutocompleteOptgroupExample,\n  AutocompleteOverviewExample,\n  AutocompletePlainInputExample,\n  AutocompleteSimpleExample,\n};\n\nconst EXAMPLES = [\n  AutocompleteAutoActiveFirstOptionExample,\n  AutocompleteDisplayExample,\n  AutocompleteFilterExample,\n  AutocompleteHarnessExample,\n  AutocompleteOptgroupExample,\n  AutocompleteOverviewExample,\n  AutocompletePlainInputExample,\n  AutocompleteSimpleExample,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatAutocompleteModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSlideToggleModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n  entryComponents: EXAMPLES,\n})\nexport class AutocompleteExamplesModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","FormControl","startWith","map","i0.ɵɵelement","i0.ɵɵtemplate","Component","i0.ɵɵtextInterpolate","i0.ɵɵlistener","CommonModule","MatAutocompleteModule","MatFormFieldModule","MatInputModule","MatSlideToggleModule","FormsModule","ReactiveFormsModule","NgModule"],"mappings":"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"}